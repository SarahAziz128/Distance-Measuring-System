
Ultrasonic_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000277a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  0000277a  0000280e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  0080017a  0080017a  00002928  2**0
                  ALLOC
  3 .stab         00001eb4  00000000  00000000  00002928  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000e1e  00000000  00000000  000047dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000055fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000579a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000598c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00007d97  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000911d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000a2f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000a4b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000a7aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b118  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 ab 0b 	jmp	0x1756	; 0x1756 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e7       	ldi	r30, 0x7A	; 122
      68:	f7 e2       	ldi	r31, 0x27	; 39
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa e7       	ldi	r26, 0x7A	; 122
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 37       	cpi	r26, 0x7F	; 127
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 e6 12 	call	0x25cc	; 0x25cc <main>
      8a:	0c 94 bb 13 	jmp	0x2776	; 0x2776 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a2 e7       	ldi	r26, 0x72	; 114
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3f 13 	jmp	0x267e	; 0x267e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	82 e7       	ldi	r24, 0x72	; 114
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 47 13 	jmp	0x268e	; 0x268e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	62 e7       	ldi	r22, 0x72	; 114
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 4b 13 	jmp	0x2696	; 0x2696 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 67 13 	jmp	0x26ce	; 0x26ce <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4f 13 	jmp	0x269e	; 0x269e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 6b 13 	jmp	0x26d6	; 0x26d6 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 47 13 	jmp	0x268e	; 0x268e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e6 58       	subi	r30, 0x86	; 134
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Ultrasonic_init>:

uint8 g_edgeCount = 0;
uint16 g_timeHigh = 0;


void  Ultrasonic_init(void){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <Ultrasonic_init+0x6>
     e34:	cd b7       	in	r28, 0x3d	; 61
     e36:	de b7       	in	r29, 0x3e	; 62

	Icu_ConfigType Icu_Config = {F_CPU_8,RISING};
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	89 83       	std	Y+1, r24	; 0x01
     e3c:	81 e0       	ldi	r24, 0x01	; 1
     e3e:	8a 83       	std	Y+2, r24	; 0x02
	Icu_init(&Icu_Config);
     e40:	ce 01       	movw	r24, r28
     e42:	01 96       	adiw	r24, 0x01	; 1
     e44:	0e 94 de 0b 	call	0x17bc	; 0x17bc <Icu_init>
	Icu_setCallBack(Ultrasonic_edgeProcessing);
     e48:	88 e4       	ldi	r24, 0x48	; 72
     e4a:	98 e0       	ldi	r25, 0x08	; 8
     e4c:	0e 94 27 0c 	call	0x184e	; 0x184e <Icu_setCallBack>

	GPIO_setupPinDirection(ULTRASONIC_PORT_ID,ULTRASONIC_PIN_NUM,PIN_OUTPUT);
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	65 e0       	ldi	r22, 0x05	; 5
     e54:	41 e0       	ldi	r20, 0x01	; 1
     e56:	0e 94 6d 08 	call	0x10da	; 0x10da <GPIO_setupPinDirection>
	GPIO_writePin(ULTRASONIC_PORT_ID,ULTRASONIC_PIN_NUM , LOGIC_LOW);
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	65 e0       	ldi	r22, 0x05	; 5
     e5e:	40 e0       	ldi	r20, 0x00	; 0
     e60:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePin>
}
     e64:	0f 90       	pop	r0
     e66:	0f 90       	pop	r0
     e68:	cf 91       	pop	r28
     e6a:	df 91       	pop	r29
     e6c:	08 95       	ret

00000e6e <Ultrasonic_Trigger>:




void Ultrasonic_Trigger(void)
{
     e6e:	df 93       	push	r29
     e70:	cf 93       	push	r28
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	68 97       	sbiw	r28, 0x18	; 24
     e78:	0f b6       	in	r0, 0x3f	; 63
     e7a:	f8 94       	cli
     e7c:	de bf       	out	0x3e, r29	; 62
     e7e:	0f be       	out	0x3f, r0	; 63
     e80:	cd bf       	out	0x3d, r28	; 61
	GPIO_writePin(ULTRASONIC_PORT_ID,ULTRASONIC_PIN_NUM , LOGIC_HIGH);
     e82:	81 e0       	ldi	r24, 0x01	; 1
     e84:	65 e0       	ldi	r22, 0x05	; 5
     e86:	41 e0       	ldi	r20, 0x01	; 1
     e88:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePin>
     e8c:	80 e0       	ldi	r24, 0x00	; 0
     e8e:	90 e0       	ldi	r25, 0x00	; 0
     e90:	a0 e7       	ldi	r26, 0x70	; 112
     e92:	b1 e4       	ldi	r27, 0x41	; 65
     e94:	8d 8b       	std	Y+21, r24	; 0x15
     e96:	9e 8b       	std	Y+22, r25	; 0x16
     e98:	af 8b       	std	Y+23, r26	; 0x17
     e9a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e9c:	6d 89       	ldd	r22, Y+21	; 0x15
     e9e:	7e 89       	ldd	r23, Y+22	; 0x16
     ea0:	8f 89       	ldd	r24, Y+23	; 0x17
     ea2:	98 8d       	ldd	r25, Y+24	; 0x18
     ea4:	2b ea       	ldi	r18, 0xAB	; 171
     ea6:	3a ea       	ldi	r19, 0xAA	; 170
     ea8:	4a e2       	ldi	r20, 0x2A	; 42
     eaa:	50 e4       	ldi	r21, 0x40	; 64
     eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     eb0:	dc 01       	movw	r26, r24
     eb2:	cb 01       	movw	r24, r22
     eb4:	89 8b       	std	Y+17, r24	; 0x11
     eb6:	9a 8b       	std	Y+18, r25	; 0x12
     eb8:	ab 8b       	std	Y+19, r26	; 0x13
     eba:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     ebc:	69 89       	ldd	r22, Y+17	; 0x11
     ebe:	7a 89       	ldd	r23, Y+18	; 0x12
     ec0:	8b 89       	ldd	r24, Y+19	; 0x13
     ec2:	9c 89       	ldd	r25, Y+20	; 0x14
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	30 e0       	ldi	r19, 0x00	; 0
     ec8:	40 e8       	ldi	r20, 0x80	; 128
     eca:	5f e3       	ldi	r21, 0x3F	; 63
     ecc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ed0:	88 23       	and	r24, r24
     ed2:	1c f4       	brge	.+6      	; 0xeda <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
     ed4:	81 e0       	ldi	r24, 0x01	; 1
     ed6:	88 8b       	std	Y+16, r24	; 0x10
     ed8:	91 c0       	rjmp	.+290    	; 0xffc <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
     eda:	69 89       	ldd	r22, Y+17	; 0x11
     edc:	7a 89       	ldd	r23, Y+18	; 0x12
     ede:	8b 89       	ldd	r24, Y+19	; 0x13
     ee0:	9c 89       	ldd	r25, Y+20	; 0x14
     ee2:	20 e0       	ldi	r18, 0x00	; 0
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	4f e7       	ldi	r20, 0x7F	; 127
     ee8:	53 e4       	ldi	r21, 0x43	; 67
     eea:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     eee:	18 16       	cp	r1, r24
     ef0:	0c f0       	brlt	.+2      	; 0xef4 <Ultrasonic_Trigger+0x86>
     ef2:	7b c0       	rjmp	.+246    	; 0xfea <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
     ef4:	6d 89       	ldd	r22, Y+21	; 0x15
     ef6:	7e 89       	ldd	r23, Y+22	; 0x16
     ef8:	8f 89       	ldd	r24, Y+23	; 0x17
     efa:	98 8d       	ldd	r25, Y+24	; 0x18
     efc:	20 e0       	ldi	r18, 0x00	; 0
     efe:	30 e0       	ldi	r19, 0x00	; 0
     f00:	4a e7       	ldi	r20, 0x7A	; 122
     f02:	54 e4       	ldi	r21, 0x44	; 68
     f04:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     f08:	dc 01       	movw	r26, r24
     f0a:	cb 01       	movw	r24, r22
     f0c:	8c 87       	std	Y+12, r24	; 0x0c
     f0e:	9d 87       	std	Y+13, r25	; 0x0d
     f10:	ae 87       	std	Y+14, r26	; 0x0e
     f12:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f14:	6c 85       	ldd	r22, Y+12	; 0x0c
     f16:	7d 85       	ldd	r23, Y+13	; 0x0d
     f18:	8e 85       	ldd	r24, Y+14	; 0x0e
     f1a:	9f 85       	ldd	r25, Y+15	; 0x0f
     f1c:	20 e0       	ldi	r18, 0x00	; 0
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	4a ef       	ldi	r20, 0xFA	; 250
     f22:	54 e4       	ldi	r21, 0x44	; 68
     f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f28:	dc 01       	movw	r26, r24
     f2a:	cb 01       	movw	r24, r22
     f2c:	88 87       	std	Y+8, r24	; 0x08
     f2e:	99 87       	std	Y+9, r25	; 0x09
     f30:	aa 87       	std	Y+10, r26	; 0x0a
     f32:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f34:	68 85       	ldd	r22, Y+8	; 0x08
     f36:	79 85       	ldd	r23, Y+9	; 0x09
     f38:	8a 85       	ldd	r24, Y+10	; 0x0a
     f3a:	9b 85       	ldd	r25, Y+11	; 0x0b
     f3c:	20 e0       	ldi	r18, 0x00	; 0
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	40 e8       	ldi	r20, 0x80	; 128
     f42:	5f e3       	ldi	r21, 0x3F	; 63
     f44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f48:	88 23       	and	r24, r24
     f4a:	2c f4       	brge	.+10     	; 0xf56 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
     f4c:	81 e0       	ldi	r24, 0x01	; 1
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	9f 83       	std	Y+7, r25	; 0x07
     f52:	8e 83       	std	Y+6, r24	; 0x06
     f54:	3f c0       	rjmp	.+126    	; 0xfd4 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
     f56:	68 85       	ldd	r22, Y+8	; 0x08
     f58:	79 85       	ldd	r23, Y+9	; 0x09
     f5a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f5c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f5e:	20 e0       	ldi	r18, 0x00	; 0
     f60:	3f ef       	ldi	r19, 0xFF	; 255
     f62:	4f e7       	ldi	r20, 0x7F	; 127
     f64:	57 e4       	ldi	r21, 0x47	; 71
     f66:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f6a:	18 16       	cp	r1, r24
     f6c:	4c f5       	brge	.+82     	; 0xfc0 <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6e:	6c 85       	ldd	r22, Y+12	; 0x0c
     f70:	7d 85       	ldd	r23, Y+13	; 0x0d
     f72:	8e 85       	ldd	r24, Y+14	; 0x0e
     f74:	9f 85       	ldd	r25, Y+15	; 0x0f
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	40 e2       	ldi	r20, 0x20	; 32
     f7c:	51 e4       	ldi	r21, 0x41	; 65
     f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f82:	dc 01       	movw	r26, r24
     f84:	cb 01       	movw	r24, r22
     f86:	bc 01       	movw	r22, r24
     f88:	cd 01       	movw	r24, r26
     f8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	9f 83       	std	Y+7, r25	; 0x07
     f94:	8e 83       	std	Y+6, r24	; 0x06
     f96:	0f c0       	rjmp	.+30     	; 0xfb6 <Ultrasonic_Trigger+0x148>
     f98:	88 ec       	ldi	r24, 0xC8	; 200
     f9a:	90 e0       	ldi	r25, 0x00	; 0
     f9c:	9d 83       	std	Y+5, r25	; 0x05
     f9e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	01 97       	sbiw	r24, 0x01	; 1
     fa6:	f1 f7       	brne	.-4      	; 0xfa4 <Ultrasonic_Trigger+0x136>
     fa8:	9d 83       	std	Y+5, r25	; 0x05
     faa:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fac:	8e 81       	ldd	r24, Y+6	; 0x06
     fae:	9f 81       	ldd	r25, Y+7	; 0x07
     fb0:	01 97       	sbiw	r24, 0x01	; 1
     fb2:	9f 83       	std	Y+7, r25	; 0x07
     fb4:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fb6:	8e 81       	ldd	r24, Y+6	; 0x06
     fb8:	9f 81       	ldd	r25, Y+7	; 0x07
     fba:	00 97       	sbiw	r24, 0x00	; 0
     fbc:	69 f7       	brne	.-38     	; 0xf98 <Ultrasonic_Trigger+0x12a>
     fbe:	24 c0       	rjmp	.+72     	; 0x1008 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc0:	68 85       	ldd	r22, Y+8	; 0x08
     fc2:	79 85       	ldd	r23, Y+9	; 0x09
     fc4:	8a 85       	ldd	r24, Y+10	; 0x0a
     fc6:	9b 85       	ldd	r25, Y+11	; 0x0b
     fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	9f 83       	std	Y+7, r25	; 0x07
     fd2:	8e 83       	std	Y+6, r24	; 0x06
     fd4:	8e 81       	ldd	r24, Y+6	; 0x06
     fd6:	9f 81       	ldd	r25, Y+7	; 0x07
     fd8:	9b 83       	std	Y+3, r25	; 0x03
     fda:	8a 83       	std	Y+2, r24	; 0x02
     fdc:	8a 81       	ldd	r24, Y+2	; 0x02
     fde:	9b 81       	ldd	r25, Y+3	; 0x03
     fe0:	01 97       	sbiw	r24, 0x01	; 1
     fe2:	f1 f7       	brne	.-4      	; 0xfe0 <Ultrasonic_Trigger+0x172>
     fe4:	9b 83       	std	Y+3, r25	; 0x03
     fe6:	8a 83       	std	Y+2, r24	; 0x02
     fe8:	0f c0       	rjmp	.+30     	; 0x1008 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fea:	69 89       	ldd	r22, Y+17	; 0x11
     fec:	7a 89       	ldd	r23, Y+18	; 0x12
     fee:	8b 89       	ldd	r24, Y+19	; 0x13
     ff0:	9c 89       	ldd	r25, Y+20	; 0x14
     ff2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff6:	dc 01       	movw	r26, r24
     ff8:	cb 01       	movw	r24, r22
     ffa:	88 8b       	std	Y+16, r24	; 0x10
     ffc:	88 89       	ldd	r24, Y+16	; 0x10
     ffe:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	8a 95       	dec	r24
    1004:	f1 f7       	brne	.-4      	; 0x1002 <Ultrasonic_Trigger+0x194>
    1006:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(15);
	GPIO_writePin(ULTRASONIC_PORT_ID,ULTRASONIC_PIN_NUM , LOGIC_LOW);
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	65 e0       	ldi	r22, 0x05	; 5
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePin>

}
    1012:	68 96       	adiw	r28, 0x18	; 24
    1014:	0f b6       	in	r0, 0x3f	; 63
    1016:	f8 94       	cli
    1018:	de bf       	out	0x3e, r29	; 62
    101a:	0f be       	out	0x3f, r0	; 63
    101c:	cd bf       	out	0x3d, r28	; 61
    101e:	cf 91       	pop	r28
    1020:	df 91       	pop	r29
    1022:	08 95       	ret

00001024 <Ultrasonic_readDistance>:

uint16 Ultrasonic_readDistance(void){
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	00 d0       	rcall	.+0      	; 0x102a <Ultrasonic_readDistance+0x6>
    102a:	00 d0       	rcall	.+0      	; 0x102c <Ultrasonic_readDistance+0x8>
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
	uint16 measure_distance;
	uint16 period;
	Ultrasonic_Trigger();
    1030:	0e 94 37 07 	call	0xe6e	; 0xe6e <Ultrasonic_Trigger>
	Ultrasonic_edgeProcessing();
    1034:	0e 94 48 08 	call	0x1090	; 0x1090 <Ultrasonic_edgeProcessing>


	/* calculate the period */
	period = ( g_timeHigh);
    1038:	80 91 7b 01 	lds	r24, 0x017B
    103c:	90 91 7c 01 	lds	r25, 0x017C
    1040:	9a 83       	std	Y+2, r25	; 0x02
    1042:	89 83       	std	Y+1, r24	; 0x01
	/*calculate the distance*/
	measure_distance = period/58.5; /*speed of sound is 340m/sec therefore through this conversion the output measured distance is in cm*/
    1044:	89 81       	ldd	r24, Y+1	; 0x01
    1046:	9a 81       	ldd	r25, Y+2	; 0x02
    1048:	cc 01       	movw	r24, r24
    104a:	a0 e0       	ldi	r26, 0x00	; 0
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	bc 01       	movw	r22, r24
    1050:	cd 01       	movw	r24, r26
    1052:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	20 e0       	ldi	r18, 0x00	; 0
    1060:	30 e0       	ldi	r19, 0x00	; 0
    1062:	4a e6       	ldi	r20, 0x6A	; 106
    1064:	52 e4       	ldi	r21, 0x42	; 66
    1066:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	bc 01       	movw	r22, r24
    1070:	cd 01       	movw	r24, r26
    1072:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	9c 83       	std	Y+4, r25	; 0x04
    107c:	8b 83       	std	Y+3, r24	; 0x03

	return measure_distance;
    107e:	8b 81       	ldd	r24, Y+3	; 0x03
    1080:	9c 81       	ldd	r25, Y+4	; 0x04
}
    1082:	0f 90       	pop	r0
    1084:	0f 90       	pop	r0
    1086:	0f 90       	pop	r0
    1088:	0f 90       	pop	r0
    108a:	cf 91       	pop	r28
    108c:	df 91       	pop	r29
    108e:	08 95       	ret

00001090 <Ultrasonic_edgeProcessing>:

void Ultrasonic_edgeProcessing(void)
{
    1090:	df 93       	push	r29
    1092:	cf 93       	push	r28
    1094:	cd b7       	in	r28, 0x3d	; 61
    1096:	de b7       	in	r29, 0x3e	; 62
	g_edgeCount++;
    1098:	80 91 7a 01 	lds	r24, 0x017A
    109c:	8f 5f       	subi	r24, 0xFF	; 255
    109e:	80 93 7a 01 	sts	0x017A, r24
	if(g_edgeCount == 1)
    10a2:	80 91 7a 01 	lds	r24, 0x017A
    10a6:	81 30       	cpi	r24, 0x01	; 1
    10a8:	31 f4       	brne	.+12     	; 0x10b6 <Ultrasonic_edgeProcessing+0x26>
	{
		/*
		 * Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		Icu_clearTimerValue();
    10aa:	0e 94 63 0c 	call	0x18c6	; 0x18c6 <Icu_clearTimerValue>
		/* Detect falling edge */
		Icu_setEdgeDetectionType(FALLING);
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	0e 94 39 0c 	call	0x1872	; 0x1872 <Icu_setEdgeDetectionType>
    10b4:	0f c0       	rjmp	.+30     	; 0x10d4 <Ultrasonic_edgeProcessing+0x44>
	}
	else if(g_edgeCount == 2)
    10b6:	80 91 7a 01 	lds	r24, 0x017A
    10ba:	82 30       	cpi	r24, 0x02	; 2
    10bc:	59 f4       	brne	.+22     	; 0x10d4 <Ultrasonic_edgeProcessing+0x44>
	{
		/* Store the High time value */
		g_timeHigh = Icu_getInputCaptureValue();
    10be:	0e 94 58 0c 	call	0x18b0	; 0x18b0 <Icu_getInputCaptureValue>
    10c2:	90 93 7c 01 	sts	0x017C, r25
    10c6:	80 93 7b 01 	sts	0x017B, r24
		/* Detect rising edge */
		Icu_setEdgeDetectionType(RISING);
    10ca:	81 e0       	ldi	r24, 0x01	; 1
    10cc:	0e 94 39 0c 	call	0x1872	; 0x1872 <Icu_setEdgeDetectionType>
		//Icu_DeInit();
		g_edgeCount = 0;
    10d0:	10 92 7a 01 	sts	0x017A, r1

	}
}
    10d4:	cf 91       	pop	r28
    10d6:	df 91       	pop	r29
    10d8:	08 95       	ret

000010da <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    10da:	df 93       	push	r29
    10dc:	cf 93       	push	r28
    10de:	00 d0       	rcall	.+0      	; 0x10e0 <GPIO_setupPinDirection+0x6>
    10e0:	00 d0       	rcall	.+0      	; 0x10e2 <GPIO_setupPinDirection+0x8>
    10e2:	0f 92       	push	r0
    10e4:	cd b7       	in	r28, 0x3d	; 61
    10e6:	de b7       	in	r29, 0x3e	; 62
    10e8:	89 83       	std	Y+1, r24	; 0x01
    10ea:	6a 83       	std	Y+2, r22	; 0x02
    10ec:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    10ee:	8a 81       	ldd	r24, Y+2	; 0x02
    10f0:	88 30       	cpi	r24, 0x08	; 8
    10f2:	08 f0       	brcs	.+2      	; 0x10f6 <GPIO_setupPinDirection+0x1c>
    10f4:	d5 c0       	rjmp	.+426    	; 0x12a0 <GPIO_setupPinDirection+0x1c6>
    10f6:	89 81       	ldd	r24, Y+1	; 0x01
    10f8:	84 30       	cpi	r24, 0x04	; 4
    10fa:	08 f0       	brcs	.+2      	; 0x10fe <GPIO_setupPinDirection+0x24>
    10fc:	d1 c0       	rjmp	.+418    	; 0x12a0 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    10fe:	89 81       	ldd	r24, Y+1	; 0x01
    1100:	28 2f       	mov	r18, r24
    1102:	30 e0       	ldi	r19, 0x00	; 0
    1104:	3d 83       	std	Y+5, r19	; 0x05
    1106:	2c 83       	std	Y+4, r18	; 0x04
    1108:	8c 81       	ldd	r24, Y+4	; 0x04
    110a:	9d 81       	ldd	r25, Y+5	; 0x05
    110c:	81 30       	cpi	r24, 0x01	; 1
    110e:	91 05       	cpc	r25, r1
    1110:	09 f4       	brne	.+2      	; 0x1114 <GPIO_setupPinDirection+0x3a>
    1112:	43 c0       	rjmp	.+134    	; 0x119a <GPIO_setupPinDirection+0xc0>
    1114:	2c 81       	ldd	r18, Y+4	; 0x04
    1116:	3d 81       	ldd	r19, Y+5	; 0x05
    1118:	22 30       	cpi	r18, 0x02	; 2
    111a:	31 05       	cpc	r19, r1
    111c:	2c f4       	brge	.+10     	; 0x1128 <GPIO_setupPinDirection+0x4e>
    111e:	8c 81       	ldd	r24, Y+4	; 0x04
    1120:	9d 81       	ldd	r25, Y+5	; 0x05
    1122:	00 97       	sbiw	r24, 0x00	; 0
    1124:	71 f0       	breq	.+28     	; 0x1142 <GPIO_setupPinDirection+0x68>
    1126:	bc c0       	rjmp	.+376    	; 0x12a0 <GPIO_setupPinDirection+0x1c6>
    1128:	2c 81       	ldd	r18, Y+4	; 0x04
    112a:	3d 81       	ldd	r19, Y+5	; 0x05
    112c:	22 30       	cpi	r18, 0x02	; 2
    112e:	31 05       	cpc	r19, r1
    1130:	09 f4       	brne	.+2      	; 0x1134 <GPIO_setupPinDirection+0x5a>
    1132:	5f c0       	rjmp	.+190    	; 0x11f2 <GPIO_setupPinDirection+0x118>
    1134:	8c 81       	ldd	r24, Y+4	; 0x04
    1136:	9d 81       	ldd	r25, Y+5	; 0x05
    1138:	83 30       	cpi	r24, 0x03	; 3
    113a:	91 05       	cpc	r25, r1
    113c:	09 f4       	brne	.+2      	; 0x1140 <GPIO_setupPinDirection+0x66>
    113e:	85 c0       	rjmp	.+266    	; 0x124a <GPIO_setupPinDirection+0x170>
    1140:	af c0       	rjmp	.+350    	; 0x12a0 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1142:	8b 81       	ldd	r24, Y+3	; 0x03
    1144:	81 30       	cpi	r24, 0x01	; 1
    1146:	a1 f4       	brne	.+40     	; 0x1170 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1148:	aa e3       	ldi	r26, 0x3A	; 58
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	ea e3       	ldi	r30, 0x3A	; 58
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	48 2f       	mov	r20, r24
    1154:	8a 81       	ldd	r24, Y+2	; 0x02
    1156:	28 2f       	mov	r18, r24
    1158:	30 e0       	ldi	r19, 0x00	; 0
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	02 2e       	mov	r0, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <GPIO_setupPinDirection+0x8c>
    1162:	88 0f       	add	r24, r24
    1164:	99 1f       	adc	r25, r25
    1166:	0a 94       	dec	r0
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <GPIO_setupPinDirection+0x88>
    116a:	84 2b       	or	r24, r20
    116c:	8c 93       	st	X, r24
    116e:	98 c0       	rjmp	.+304    	; 0x12a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1170:	aa e3       	ldi	r26, 0x3A	; 58
    1172:	b0 e0       	ldi	r27, 0x00	; 0
    1174:	ea e3       	ldi	r30, 0x3A	; 58
    1176:	f0 e0       	ldi	r31, 0x00	; 0
    1178:	80 81       	ld	r24, Z
    117a:	48 2f       	mov	r20, r24
    117c:	8a 81       	ldd	r24, Y+2	; 0x02
    117e:	28 2f       	mov	r18, r24
    1180:	30 e0       	ldi	r19, 0x00	; 0
    1182:	81 e0       	ldi	r24, 0x01	; 1
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	02 2e       	mov	r0, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <GPIO_setupPinDirection+0xb4>
    118a:	88 0f       	add	r24, r24
    118c:	99 1f       	adc	r25, r25
    118e:	0a 94       	dec	r0
    1190:	e2 f7       	brpl	.-8      	; 0x118a <GPIO_setupPinDirection+0xb0>
    1192:	80 95       	com	r24
    1194:	84 23       	and	r24, r20
    1196:	8c 93       	st	X, r24
    1198:	83 c0       	rjmp	.+262    	; 0x12a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    119a:	8b 81       	ldd	r24, Y+3	; 0x03
    119c:	81 30       	cpi	r24, 0x01	; 1
    119e:	a1 f4       	brne	.+40     	; 0x11c8 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    11a0:	a7 e3       	ldi	r26, 0x37	; 55
    11a2:	b0 e0       	ldi	r27, 0x00	; 0
    11a4:	e7 e3       	ldi	r30, 0x37	; 55
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	80 81       	ld	r24, Z
    11aa:	48 2f       	mov	r20, r24
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	28 2f       	mov	r18, r24
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	81 e0       	ldi	r24, 0x01	; 1
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	02 2e       	mov	r0, r18
    11b8:	02 c0       	rjmp	.+4      	; 0x11be <GPIO_setupPinDirection+0xe4>
    11ba:	88 0f       	add	r24, r24
    11bc:	99 1f       	adc	r25, r25
    11be:	0a 94       	dec	r0
    11c0:	e2 f7       	brpl	.-8      	; 0x11ba <GPIO_setupPinDirection+0xe0>
    11c2:	84 2b       	or	r24, r20
    11c4:	8c 93       	st	X, r24
    11c6:	6c c0       	rjmp	.+216    	; 0x12a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    11c8:	a7 e3       	ldi	r26, 0x37	; 55
    11ca:	b0 e0       	ldi	r27, 0x00	; 0
    11cc:	e7 e3       	ldi	r30, 0x37	; 55
    11ce:	f0 e0       	ldi	r31, 0x00	; 0
    11d0:	80 81       	ld	r24, Z
    11d2:	48 2f       	mov	r20, r24
    11d4:	8a 81       	ldd	r24, Y+2	; 0x02
    11d6:	28 2f       	mov	r18, r24
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	81 e0       	ldi	r24, 0x01	; 1
    11dc:	90 e0       	ldi	r25, 0x00	; 0
    11de:	02 2e       	mov	r0, r18
    11e0:	02 c0       	rjmp	.+4      	; 0x11e6 <GPIO_setupPinDirection+0x10c>
    11e2:	88 0f       	add	r24, r24
    11e4:	99 1f       	adc	r25, r25
    11e6:	0a 94       	dec	r0
    11e8:	e2 f7       	brpl	.-8      	; 0x11e2 <GPIO_setupPinDirection+0x108>
    11ea:	80 95       	com	r24
    11ec:	84 23       	and	r24, r20
    11ee:	8c 93       	st	X, r24
    11f0:	57 c0       	rjmp	.+174    	; 0x12a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	81 30       	cpi	r24, 0x01	; 1
    11f6:	a1 f4       	brne	.+40     	; 0x1220 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    11f8:	a4 e3       	ldi	r26, 0x34	; 52
    11fa:	b0 e0       	ldi	r27, 0x00	; 0
    11fc:	e4 e3       	ldi	r30, 0x34	; 52
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	48 2f       	mov	r20, r24
    1204:	8a 81       	ldd	r24, Y+2	; 0x02
    1206:	28 2f       	mov	r18, r24
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	02 2e       	mov	r0, r18
    1210:	02 c0       	rjmp	.+4      	; 0x1216 <GPIO_setupPinDirection+0x13c>
    1212:	88 0f       	add	r24, r24
    1214:	99 1f       	adc	r25, r25
    1216:	0a 94       	dec	r0
    1218:	e2 f7       	brpl	.-8      	; 0x1212 <GPIO_setupPinDirection+0x138>
    121a:	84 2b       	or	r24, r20
    121c:	8c 93       	st	X, r24
    121e:	40 c0       	rjmp	.+128    	; 0x12a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1220:	a4 e3       	ldi	r26, 0x34	; 52
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	e4 e3       	ldi	r30, 0x34	; 52
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	48 2f       	mov	r20, r24
    122c:	8a 81       	ldd	r24, Y+2	; 0x02
    122e:	28 2f       	mov	r18, r24
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	02 2e       	mov	r0, r18
    1238:	02 c0       	rjmp	.+4      	; 0x123e <GPIO_setupPinDirection+0x164>
    123a:	88 0f       	add	r24, r24
    123c:	99 1f       	adc	r25, r25
    123e:	0a 94       	dec	r0
    1240:	e2 f7       	brpl	.-8      	; 0x123a <GPIO_setupPinDirection+0x160>
    1242:	80 95       	com	r24
    1244:	84 23       	and	r24, r20
    1246:	8c 93       	st	X, r24
    1248:	2b c0       	rjmp	.+86     	; 0x12a0 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    124a:	8b 81       	ldd	r24, Y+3	; 0x03
    124c:	81 30       	cpi	r24, 0x01	; 1
    124e:	a1 f4       	brne	.+40     	; 0x1278 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1250:	a1 e3       	ldi	r26, 0x31	; 49
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e1 e3       	ldi	r30, 0x31	; 49
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	48 2f       	mov	r20, r24
    125c:	8a 81       	ldd	r24, Y+2	; 0x02
    125e:	28 2f       	mov	r18, r24
    1260:	30 e0       	ldi	r19, 0x00	; 0
    1262:	81 e0       	ldi	r24, 0x01	; 1
    1264:	90 e0       	ldi	r25, 0x00	; 0
    1266:	02 2e       	mov	r0, r18
    1268:	02 c0       	rjmp	.+4      	; 0x126e <GPIO_setupPinDirection+0x194>
    126a:	88 0f       	add	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	0a 94       	dec	r0
    1270:	e2 f7       	brpl	.-8      	; 0x126a <GPIO_setupPinDirection+0x190>
    1272:	84 2b       	or	r24, r20
    1274:	8c 93       	st	X, r24
    1276:	14 c0       	rjmp	.+40     	; 0x12a0 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1278:	a1 e3       	ldi	r26, 0x31	; 49
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e1 e3       	ldi	r30, 0x31	; 49
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	48 2f       	mov	r20, r24
    1284:	8a 81       	ldd	r24, Y+2	; 0x02
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	90 e0       	ldi	r25, 0x00	; 0
    128e:	02 2e       	mov	r0, r18
    1290:	02 c0       	rjmp	.+4      	; 0x1296 <GPIO_setupPinDirection+0x1bc>
    1292:	88 0f       	add	r24, r24
    1294:	99 1f       	adc	r25, r25
    1296:	0a 94       	dec	r0
    1298:	e2 f7       	brpl	.-8      	; 0x1292 <GPIO_setupPinDirection+0x1b8>
    129a:	80 95       	com	r24
    129c:	84 23       	and	r24, r20
    129e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    12a0:	0f 90       	pop	r0
    12a2:	0f 90       	pop	r0
    12a4:	0f 90       	pop	r0
    12a6:	0f 90       	pop	r0
    12a8:	0f 90       	pop	r0
    12aa:	cf 91       	pop	r28
    12ac:	df 91       	pop	r29
    12ae:	08 95       	ret

000012b0 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    12b0:	df 93       	push	r29
    12b2:	cf 93       	push	r28
    12b4:	00 d0       	rcall	.+0      	; 0x12b6 <GPIO_writePin+0x6>
    12b6:	00 d0       	rcall	.+0      	; 0x12b8 <GPIO_writePin+0x8>
    12b8:	0f 92       	push	r0
    12ba:	cd b7       	in	r28, 0x3d	; 61
    12bc:	de b7       	in	r29, 0x3e	; 62
    12be:	89 83       	std	Y+1, r24	; 0x01
    12c0:	6a 83       	std	Y+2, r22	; 0x02
    12c2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12c4:	8a 81       	ldd	r24, Y+2	; 0x02
    12c6:	88 30       	cpi	r24, 0x08	; 8
    12c8:	08 f0       	brcs	.+2      	; 0x12cc <GPIO_writePin+0x1c>
    12ca:	d5 c0       	rjmp	.+426    	; 0x1476 <GPIO_writePin+0x1c6>
    12cc:	89 81       	ldd	r24, Y+1	; 0x01
    12ce:	84 30       	cpi	r24, 0x04	; 4
    12d0:	08 f0       	brcs	.+2      	; 0x12d4 <GPIO_writePin+0x24>
    12d2:	d1 c0       	rjmp	.+418    	; 0x1476 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	28 2f       	mov	r18, r24
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	3d 83       	std	Y+5, r19	; 0x05
    12dc:	2c 83       	std	Y+4, r18	; 0x04
    12de:	8c 81       	ldd	r24, Y+4	; 0x04
    12e0:	9d 81       	ldd	r25, Y+5	; 0x05
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	91 05       	cpc	r25, r1
    12e6:	09 f4       	brne	.+2      	; 0x12ea <GPIO_writePin+0x3a>
    12e8:	43 c0       	rjmp	.+134    	; 0x1370 <GPIO_writePin+0xc0>
    12ea:	2c 81       	ldd	r18, Y+4	; 0x04
    12ec:	3d 81       	ldd	r19, Y+5	; 0x05
    12ee:	22 30       	cpi	r18, 0x02	; 2
    12f0:	31 05       	cpc	r19, r1
    12f2:	2c f4       	brge	.+10     	; 0x12fe <GPIO_writePin+0x4e>
    12f4:	8c 81       	ldd	r24, Y+4	; 0x04
    12f6:	9d 81       	ldd	r25, Y+5	; 0x05
    12f8:	00 97       	sbiw	r24, 0x00	; 0
    12fa:	71 f0       	breq	.+28     	; 0x1318 <GPIO_writePin+0x68>
    12fc:	bc c0       	rjmp	.+376    	; 0x1476 <GPIO_writePin+0x1c6>
    12fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1300:	3d 81       	ldd	r19, Y+5	; 0x05
    1302:	22 30       	cpi	r18, 0x02	; 2
    1304:	31 05       	cpc	r19, r1
    1306:	09 f4       	brne	.+2      	; 0x130a <GPIO_writePin+0x5a>
    1308:	5f c0       	rjmp	.+190    	; 0x13c8 <GPIO_writePin+0x118>
    130a:	8c 81       	ldd	r24, Y+4	; 0x04
    130c:	9d 81       	ldd	r25, Y+5	; 0x05
    130e:	83 30       	cpi	r24, 0x03	; 3
    1310:	91 05       	cpc	r25, r1
    1312:	09 f4       	brne	.+2      	; 0x1316 <GPIO_writePin+0x66>
    1314:	85 c0       	rjmp	.+266    	; 0x1420 <GPIO_writePin+0x170>
    1316:	af c0       	rjmp	.+350    	; 0x1476 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1318:	8b 81       	ldd	r24, Y+3	; 0x03
    131a:	81 30       	cpi	r24, 0x01	; 1
    131c:	a1 f4       	brne	.+40     	; 0x1346 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    131e:	ab e3       	ldi	r26, 0x3B	; 59
    1320:	b0 e0       	ldi	r27, 0x00	; 0
    1322:	eb e3       	ldi	r30, 0x3B	; 59
    1324:	f0 e0       	ldi	r31, 0x00	; 0
    1326:	80 81       	ld	r24, Z
    1328:	48 2f       	mov	r20, r24
    132a:	8a 81       	ldd	r24, Y+2	; 0x02
    132c:	28 2f       	mov	r18, r24
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	90 e0       	ldi	r25, 0x00	; 0
    1334:	02 2e       	mov	r0, r18
    1336:	02 c0       	rjmp	.+4      	; 0x133c <GPIO_writePin+0x8c>
    1338:	88 0f       	add	r24, r24
    133a:	99 1f       	adc	r25, r25
    133c:	0a 94       	dec	r0
    133e:	e2 f7       	brpl	.-8      	; 0x1338 <GPIO_writePin+0x88>
    1340:	84 2b       	or	r24, r20
    1342:	8c 93       	st	X, r24
    1344:	98 c0       	rjmp	.+304    	; 0x1476 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1346:	ab e3       	ldi	r26, 0x3B	; 59
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	eb e3       	ldi	r30, 0x3B	; 59
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	48 2f       	mov	r20, r24
    1352:	8a 81       	ldd	r24, Y+2	; 0x02
    1354:	28 2f       	mov	r18, r24
    1356:	30 e0       	ldi	r19, 0x00	; 0
    1358:	81 e0       	ldi	r24, 0x01	; 1
    135a:	90 e0       	ldi	r25, 0x00	; 0
    135c:	02 2e       	mov	r0, r18
    135e:	02 c0       	rjmp	.+4      	; 0x1364 <GPIO_writePin+0xb4>
    1360:	88 0f       	add	r24, r24
    1362:	99 1f       	adc	r25, r25
    1364:	0a 94       	dec	r0
    1366:	e2 f7       	brpl	.-8      	; 0x1360 <GPIO_writePin+0xb0>
    1368:	80 95       	com	r24
    136a:	84 23       	and	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	83 c0       	rjmp	.+262    	; 0x1476 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1370:	8b 81       	ldd	r24, Y+3	; 0x03
    1372:	81 30       	cpi	r24, 0x01	; 1
    1374:	a1 f4       	brne	.+40     	; 0x139e <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1376:	a8 e3       	ldi	r26, 0x38	; 56
    1378:	b0 e0       	ldi	r27, 0x00	; 0
    137a:	e8 e3       	ldi	r30, 0x38	; 56
    137c:	f0 e0       	ldi	r31, 0x00	; 0
    137e:	80 81       	ld	r24, Z
    1380:	48 2f       	mov	r20, r24
    1382:	8a 81       	ldd	r24, Y+2	; 0x02
    1384:	28 2f       	mov	r18, r24
    1386:	30 e0       	ldi	r19, 0x00	; 0
    1388:	81 e0       	ldi	r24, 0x01	; 1
    138a:	90 e0       	ldi	r25, 0x00	; 0
    138c:	02 2e       	mov	r0, r18
    138e:	02 c0       	rjmp	.+4      	; 0x1394 <GPIO_writePin+0xe4>
    1390:	88 0f       	add	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	0a 94       	dec	r0
    1396:	e2 f7       	brpl	.-8      	; 0x1390 <GPIO_writePin+0xe0>
    1398:	84 2b       	or	r24, r20
    139a:	8c 93       	st	X, r24
    139c:	6c c0       	rjmp	.+216    	; 0x1476 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    139e:	a8 e3       	ldi	r26, 0x38	; 56
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	e8 e3       	ldi	r30, 0x38	; 56
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	48 2f       	mov	r20, r24
    13aa:	8a 81       	ldd	r24, Y+2	; 0x02
    13ac:	28 2f       	mov	r18, r24
    13ae:	30 e0       	ldi	r19, 0x00	; 0
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	02 2e       	mov	r0, r18
    13b6:	02 c0       	rjmp	.+4      	; 0x13bc <GPIO_writePin+0x10c>
    13b8:	88 0f       	add	r24, r24
    13ba:	99 1f       	adc	r25, r25
    13bc:	0a 94       	dec	r0
    13be:	e2 f7       	brpl	.-8      	; 0x13b8 <GPIO_writePin+0x108>
    13c0:	80 95       	com	r24
    13c2:	84 23       	and	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	57 c0       	rjmp	.+174    	; 0x1476 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	81 30       	cpi	r24, 0x01	; 1
    13cc:	a1 f4       	brne	.+40     	; 0x13f6 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    13ce:	a5 e3       	ldi	r26, 0x35	; 53
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e5 e3       	ldi	r30, 0x35	; 53
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <GPIO_writePin+0x13c>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <GPIO_writePin+0x138>
    13f0:	84 2b       	or	r24, r20
    13f2:	8c 93       	st	X, r24
    13f4:	40 c0       	rjmp	.+128    	; 0x1476 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    13f6:	a5 e3       	ldi	r26, 0x35	; 53
    13f8:	b0 e0       	ldi	r27, 0x00	; 0
    13fa:	e5 e3       	ldi	r30, 0x35	; 53
    13fc:	f0 e0       	ldi	r31, 0x00	; 0
    13fe:	80 81       	ld	r24, Z
    1400:	48 2f       	mov	r20, r24
    1402:	8a 81       	ldd	r24, Y+2	; 0x02
    1404:	28 2f       	mov	r18, r24
    1406:	30 e0       	ldi	r19, 0x00	; 0
    1408:	81 e0       	ldi	r24, 0x01	; 1
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	02 2e       	mov	r0, r18
    140e:	02 c0       	rjmp	.+4      	; 0x1414 <GPIO_writePin+0x164>
    1410:	88 0f       	add	r24, r24
    1412:	99 1f       	adc	r25, r25
    1414:	0a 94       	dec	r0
    1416:	e2 f7       	brpl	.-8      	; 0x1410 <GPIO_writePin+0x160>
    1418:	80 95       	com	r24
    141a:	84 23       	and	r24, r20
    141c:	8c 93       	st	X, r24
    141e:	2b c0       	rjmp	.+86     	; 0x1476 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	81 30       	cpi	r24, 0x01	; 1
    1424:	a1 f4       	brne	.+40     	; 0x144e <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1426:	a2 e3       	ldi	r26, 0x32	; 50
    1428:	b0 e0       	ldi	r27, 0x00	; 0
    142a:	e2 e3       	ldi	r30, 0x32	; 50
    142c:	f0 e0       	ldi	r31, 0x00	; 0
    142e:	80 81       	ld	r24, Z
    1430:	48 2f       	mov	r20, r24
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	28 2f       	mov	r18, r24
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	02 2e       	mov	r0, r18
    143e:	02 c0       	rjmp	.+4      	; 0x1444 <GPIO_writePin+0x194>
    1440:	88 0f       	add	r24, r24
    1442:	99 1f       	adc	r25, r25
    1444:	0a 94       	dec	r0
    1446:	e2 f7       	brpl	.-8      	; 0x1440 <GPIO_writePin+0x190>
    1448:	84 2b       	or	r24, r20
    144a:	8c 93       	st	X, r24
    144c:	14 c0       	rjmp	.+40     	; 0x1476 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    144e:	a2 e3       	ldi	r26, 0x32	; 50
    1450:	b0 e0       	ldi	r27, 0x00	; 0
    1452:	e2 e3       	ldi	r30, 0x32	; 50
    1454:	f0 e0       	ldi	r31, 0x00	; 0
    1456:	80 81       	ld	r24, Z
    1458:	48 2f       	mov	r20, r24
    145a:	8a 81       	ldd	r24, Y+2	; 0x02
    145c:	28 2f       	mov	r18, r24
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 2e       	mov	r0, r18
    1466:	02 c0       	rjmp	.+4      	; 0x146c <GPIO_writePin+0x1bc>
    1468:	88 0f       	add	r24, r24
    146a:	99 1f       	adc	r25, r25
    146c:	0a 94       	dec	r0
    146e:	e2 f7       	brpl	.-8      	; 0x1468 <GPIO_writePin+0x1b8>
    1470:	80 95       	com	r24
    1472:	84 23       	and	r24, r20
    1474:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1476:	0f 90       	pop	r0
    1478:	0f 90       	pop	r0
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	00 d0       	rcall	.+0      	; 0x148c <GPIO_readPin+0x6>
    148c:	00 d0       	rcall	.+0      	; 0x148e <GPIO_readPin+0x8>
    148e:	0f 92       	push	r0
    1490:	cd b7       	in	r28, 0x3d	; 61
    1492:	de b7       	in	r29, 0x3e	; 62
    1494:	8a 83       	std	Y+2, r24	; 0x02
    1496:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1498:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    149a:	8b 81       	ldd	r24, Y+3	; 0x03
    149c:	88 30       	cpi	r24, 0x08	; 8
    149e:	08 f0       	brcs	.+2      	; 0x14a2 <GPIO_readPin+0x1c>
    14a0:	84 c0       	rjmp	.+264    	; 0x15aa <GPIO_readPin+0x124>
    14a2:	8a 81       	ldd	r24, Y+2	; 0x02
    14a4:	84 30       	cpi	r24, 0x04	; 4
    14a6:	08 f0       	brcs	.+2      	; 0x14aa <GPIO_readPin+0x24>
    14a8:	80 c0       	rjmp	.+256    	; 0x15aa <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	28 2f       	mov	r18, r24
    14ae:	30 e0       	ldi	r19, 0x00	; 0
    14b0:	3d 83       	std	Y+5, r19	; 0x05
    14b2:	2c 83       	std	Y+4, r18	; 0x04
    14b4:	4c 81       	ldd	r20, Y+4	; 0x04
    14b6:	5d 81       	ldd	r21, Y+5	; 0x05
    14b8:	41 30       	cpi	r20, 0x01	; 1
    14ba:	51 05       	cpc	r21, r1
    14bc:	79 f1       	breq	.+94     	; 0x151c <GPIO_readPin+0x96>
    14be:	8c 81       	ldd	r24, Y+4	; 0x04
    14c0:	9d 81       	ldd	r25, Y+5	; 0x05
    14c2:	82 30       	cpi	r24, 0x02	; 2
    14c4:	91 05       	cpc	r25, r1
    14c6:	34 f4       	brge	.+12     	; 0x14d4 <GPIO_readPin+0x4e>
    14c8:	2c 81       	ldd	r18, Y+4	; 0x04
    14ca:	3d 81       	ldd	r19, Y+5	; 0x05
    14cc:	21 15       	cp	r18, r1
    14ce:	31 05       	cpc	r19, r1
    14d0:	69 f0       	breq	.+26     	; 0x14ec <GPIO_readPin+0x66>
    14d2:	6b c0       	rjmp	.+214    	; 0x15aa <GPIO_readPin+0x124>
    14d4:	4c 81       	ldd	r20, Y+4	; 0x04
    14d6:	5d 81       	ldd	r21, Y+5	; 0x05
    14d8:	42 30       	cpi	r20, 0x02	; 2
    14da:	51 05       	cpc	r21, r1
    14dc:	b9 f1       	breq	.+110    	; 0x154c <GPIO_readPin+0xc6>
    14de:	8c 81       	ldd	r24, Y+4	; 0x04
    14e0:	9d 81       	ldd	r25, Y+5	; 0x05
    14e2:	83 30       	cpi	r24, 0x03	; 3
    14e4:	91 05       	cpc	r25, r1
    14e6:	09 f4       	brne	.+2      	; 0x14ea <GPIO_readPin+0x64>
    14e8:	49 c0       	rjmp	.+146    	; 0x157c <GPIO_readPin+0xf6>
    14ea:	5f c0       	rjmp	.+190    	; 0x15aa <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    14ec:	e9 e3       	ldi	r30, 0x39	; 57
    14ee:	f0 e0       	ldi	r31, 0x00	; 0
    14f0:	80 81       	ld	r24, Z
    14f2:	28 2f       	mov	r18, r24
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	88 2f       	mov	r24, r24
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	a9 01       	movw	r20, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <GPIO_readPin+0x7e>
    1500:	55 95       	asr	r21
    1502:	47 95       	ror	r20
    1504:	8a 95       	dec	r24
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <GPIO_readPin+0x7a>
    1508:	ca 01       	movw	r24, r20
    150a:	81 70       	andi	r24, 0x01	; 1
    150c:	90 70       	andi	r25, 0x00	; 0
    150e:	88 23       	and	r24, r24
    1510:	19 f0       	breq	.+6      	; 0x1518 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	89 83       	std	Y+1, r24	; 0x01
    1516:	49 c0       	rjmp	.+146    	; 0x15aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1518:	19 82       	std	Y+1, r1	; 0x01
    151a:	47 c0       	rjmp	.+142    	; 0x15aa <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    151c:	e6 e3       	ldi	r30, 0x36	; 54
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	80 81       	ld	r24, Z
    1522:	28 2f       	mov	r18, r24
    1524:	30 e0       	ldi	r19, 0x00	; 0
    1526:	8b 81       	ldd	r24, Y+3	; 0x03
    1528:	88 2f       	mov	r24, r24
    152a:	90 e0       	ldi	r25, 0x00	; 0
    152c:	a9 01       	movw	r20, r18
    152e:	02 c0       	rjmp	.+4      	; 0x1534 <GPIO_readPin+0xae>
    1530:	55 95       	asr	r21
    1532:	47 95       	ror	r20
    1534:	8a 95       	dec	r24
    1536:	e2 f7       	brpl	.-8      	; 0x1530 <GPIO_readPin+0xaa>
    1538:	ca 01       	movw	r24, r20
    153a:	81 70       	andi	r24, 0x01	; 1
    153c:	90 70       	andi	r25, 0x00	; 0
    153e:	88 23       	and	r24, r24
    1540:	19 f0       	breq	.+6      	; 0x1548 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1542:	81 e0       	ldi	r24, 0x01	; 1
    1544:	89 83       	std	Y+1, r24	; 0x01
    1546:	31 c0       	rjmp	.+98     	; 0x15aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1548:	19 82       	std	Y+1, r1	; 0x01
    154a:	2f c0       	rjmp	.+94     	; 0x15aa <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    154c:	e3 e3       	ldi	r30, 0x33	; 51
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	28 2f       	mov	r18, r24
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	88 2f       	mov	r24, r24
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	a9 01       	movw	r20, r18
    155e:	02 c0       	rjmp	.+4      	; 0x1564 <GPIO_readPin+0xde>
    1560:	55 95       	asr	r21
    1562:	47 95       	ror	r20
    1564:	8a 95       	dec	r24
    1566:	e2 f7       	brpl	.-8      	; 0x1560 <GPIO_readPin+0xda>
    1568:	ca 01       	movw	r24, r20
    156a:	81 70       	andi	r24, 0x01	; 1
    156c:	90 70       	andi	r25, 0x00	; 0
    156e:	88 23       	and	r24, r24
    1570:	19 f0       	breq	.+6      	; 0x1578 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1572:	81 e0       	ldi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	19 c0       	rjmp	.+50     	; 0x15aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1578:	19 82       	std	Y+1, r1	; 0x01
    157a:	17 c0       	rjmp	.+46     	; 0x15aa <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    157c:	e0 e3       	ldi	r30, 0x30	; 48
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	28 2f       	mov	r18, r24
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	8b 81       	ldd	r24, Y+3	; 0x03
    1588:	88 2f       	mov	r24, r24
    158a:	90 e0       	ldi	r25, 0x00	; 0
    158c:	a9 01       	movw	r20, r18
    158e:	02 c0       	rjmp	.+4      	; 0x1594 <GPIO_readPin+0x10e>
    1590:	55 95       	asr	r21
    1592:	47 95       	ror	r20
    1594:	8a 95       	dec	r24
    1596:	e2 f7       	brpl	.-8      	; 0x1590 <GPIO_readPin+0x10a>
    1598:	ca 01       	movw	r24, r20
    159a:	81 70       	andi	r24, 0x01	; 1
    159c:	90 70       	andi	r25, 0x00	; 0
    159e:	88 23       	and	r24, r24
    15a0:	19 f0       	breq	.+6      	; 0x15a8 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	89 83       	std	Y+1, r24	; 0x01
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    15a8:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    15aa:	89 81       	ldd	r24, Y+1	; 0x01
}
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	0f 90       	pop	r0
    15b6:	cf 91       	pop	r28
    15b8:	df 91       	pop	r29
    15ba:	08 95       	ret

000015bc <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    15bc:	df 93       	push	r29
    15be:	cf 93       	push	r28
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <GPIO_setupPortDirection+0x6>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <GPIO_setupPortDirection+0x8>
    15c4:	cd b7       	in	r28, 0x3d	; 61
    15c6:	de b7       	in	r29, 0x3e	; 62
    15c8:	89 83       	std	Y+1, r24	; 0x01
    15ca:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    15cc:	89 81       	ldd	r24, Y+1	; 0x01
    15ce:	84 30       	cpi	r24, 0x04	; 4
    15d0:	90 f5       	brcc	.+100    	; 0x1636 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	3c 83       	std	Y+4, r19	; 0x04
    15da:	2b 83       	std	Y+3, r18	; 0x03
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	91 05       	cpc	r25, r1
    15e4:	d1 f0       	breq	.+52     	; 0x161a <GPIO_setupPortDirection+0x5e>
    15e6:	2b 81       	ldd	r18, Y+3	; 0x03
    15e8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	2c f4       	brge	.+10     	; 0x15fa <GPIO_setupPortDirection+0x3e>
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	61 f0       	breq	.+24     	; 0x1610 <GPIO_setupPortDirection+0x54>
    15f8:	1e c0       	rjmp	.+60     	; 0x1636 <GPIO_setupPortDirection+0x7a>
    15fa:	2b 81       	ldd	r18, Y+3	; 0x03
    15fc:	3c 81       	ldd	r19, Y+4	; 0x04
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	81 f0       	breq	.+32     	; 0x1624 <GPIO_setupPortDirection+0x68>
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	81 f0       	breq	.+32     	; 0x162e <GPIO_setupPortDirection+0x72>
    160e:	13 c0       	rjmp	.+38     	; 0x1636 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1610:	ea e3       	ldi	r30, 0x3A	; 58
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	8a 81       	ldd	r24, Y+2	; 0x02
    1616:	80 83       	st	Z, r24
    1618:	0e c0       	rjmp	.+28     	; 0x1636 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    161a:	e7 e3       	ldi	r30, 0x37	; 55
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	80 83       	st	Z, r24
    1622:	09 c0       	rjmp	.+18     	; 0x1636 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1624:	e4 e3       	ldi	r30, 0x34	; 52
    1626:	f0 e0       	ldi	r31, 0x00	; 0
    1628:	8a 81       	ldd	r24, Y+2	; 0x02
    162a:	80 83       	st	Z, r24
    162c:	04 c0       	rjmp	.+8      	; 0x1636 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    162e:	e1 e3       	ldi	r30, 0x31	; 49
    1630:	f0 e0       	ldi	r31, 0x00	; 0
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	80 83       	st	Z, r24
			break;
		}
	}
}
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	0f 90       	pop	r0
    163e:	cf 91       	pop	r28
    1640:	df 91       	pop	r29
    1642:	08 95       	ret

00001644 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1644:	df 93       	push	r29
    1646:	cf 93       	push	r28
    1648:	00 d0       	rcall	.+0      	; 0x164a <GPIO_writePort+0x6>
    164a:	00 d0       	rcall	.+0      	; 0x164c <GPIO_writePort+0x8>
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	89 83       	std	Y+1, r24	; 0x01
    1652:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	84 30       	cpi	r24, 0x04	; 4
    1658:	90 f5       	brcc	.+100    	; 0x16be <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	3c 83       	std	Y+4, r19	; 0x04
    1662:	2b 83       	std	Y+3, r18	; 0x03
    1664:	8b 81       	ldd	r24, Y+3	; 0x03
    1666:	9c 81       	ldd	r25, Y+4	; 0x04
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	91 05       	cpc	r25, r1
    166c:	d1 f0       	breq	.+52     	; 0x16a2 <GPIO_writePort+0x5e>
    166e:	2b 81       	ldd	r18, Y+3	; 0x03
    1670:	3c 81       	ldd	r19, Y+4	; 0x04
    1672:	22 30       	cpi	r18, 0x02	; 2
    1674:	31 05       	cpc	r19, r1
    1676:	2c f4       	brge	.+10     	; 0x1682 <GPIO_writePort+0x3e>
    1678:	8b 81       	ldd	r24, Y+3	; 0x03
    167a:	9c 81       	ldd	r25, Y+4	; 0x04
    167c:	00 97       	sbiw	r24, 0x00	; 0
    167e:	61 f0       	breq	.+24     	; 0x1698 <GPIO_writePort+0x54>
    1680:	1e c0       	rjmp	.+60     	; 0x16be <GPIO_writePort+0x7a>
    1682:	2b 81       	ldd	r18, Y+3	; 0x03
    1684:	3c 81       	ldd	r19, Y+4	; 0x04
    1686:	22 30       	cpi	r18, 0x02	; 2
    1688:	31 05       	cpc	r19, r1
    168a:	81 f0       	breq	.+32     	; 0x16ac <GPIO_writePort+0x68>
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	9c 81       	ldd	r25, Y+4	; 0x04
    1690:	83 30       	cpi	r24, 0x03	; 3
    1692:	91 05       	cpc	r25, r1
    1694:	81 f0       	breq	.+32     	; 0x16b6 <GPIO_writePort+0x72>
    1696:	13 c0       	rjmp	.+38     	; 0x16be <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1698:	eb e3       	ldi	r30, 0x3B	; 59
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
    16a0:	0e c0       	rjmp	.+28     	; 0x16be <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    16a2:	e8 e3       	ldi	r30, 0x38	; 56
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 83       	st	Z, r24
    16aa:	09 c0       	rjmp	.+18     	; 0x16be <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    16ac:	e5 e3       	ldi	r30, 0x35	; 53
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	80 83       	st	Z, r24
    16b4:	04 c0       	rjmp	.+8      	; 0x16be <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    16b6:	e2 e3       	ldi	r30, 0x32	; 50
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	8a 81       	ldd	r24, Y+2	; 0x02
    16bc:	80 83       	st	Z, r24
			break;
		}
	}
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	0f 90       	pop	r0
    16c6:	cf 91       	pop	r28
    16c8:	df 91       	pop	r29
    16ca:	08 95       	ret

000016cc <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    16cc:	df 93       	push	r29
    16ce:	cf 93       	push	r28
    16d0:	00 d0       	rcall	.+0      	; 0x16d2 <GPIO_readPort+0x6>
    16d2:	00 d0       	rcall	.+0      	; 0x16d4 <GPIO_readPort+0x8>
    16d4:	cd b7       	in	r28, 0x3d	; 61
    16d6:	de b7       	in	r29, 0x3e	; 62
    16d8:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    16da:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    16dc:	8a 81       	ldd	r24, Y+2	; 0x02
    16de:	84 30       	cpi	r24, 0x04	; 4
    16e0:	90 f5       	brcc	.+100    	; 0x1746 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	3c 83       	std	Y+4, r19	; 0x04
    16ea:	2b 83       	std	Y+3, r18	; 0x03
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	9c 81       	ldd	r25, Y+4	; 0x04
    16f0:	81 30       	cpi	r24, 0x01	; 1
    16f2:	91 05       	cpc	r25, r1
    16f4:	d1 f0       	breq	.+52     	; 0x172a <GPIO_readPort+0x5e>
    16f6:	2b 81       	ldd	r18, Y+3	; 0x03
    16f8:	3c 81       	ldd	r19, Y+4	; 0x04
    16fa:	22 30       	cpi	r18, 0x02	; 2
    16fc:	31 05       	cpc	r19, r1
    16fe:	2c f4       	brge	.+10     	; 0x170a <GPIO_readPort+0x3e>
    1700:	8b 81       	ldd	r24, Y+3	; 0x03
    1702:	9c 81       	ldd	r25, Y+4	; 0x04
    1704:	00 97       	sbiw	r24, 0x00	; 0
    1706:	61 f0       	breq	.+24     	; 0x1720 <GPIO_readPort+0x54>
    1708:	1e c0       	rjmp	.+60     	; 0x1746 <GPIO_readPort+0x7a>
    170a:	2b 81       	ldd	r18, Y+3	; 0x03
    170c:	3c 81       	ldd	r19, Y+4	; 0x04
    170e:	22 30       	cpi	r18, 0x02	; 2
    1710:	31 05       	cpc	r19, r1
    1712:	81 f0       	breq	.+32     	; 0x1734 <GPIO_readPort+0x68>
    1714:	8b 81       	ldd	r24, Y+3	; 0x03
    1716:	9c 81       	ldd	r25, Y+4	; 0x04
    1718:	83 30       	cpi	r24, 0x03	; 3
    171a:	91 05       	cpc	r25, r1
    171c:	81 f0       	breq	.+32     	; 0x173e <GPIO_readPort+0x72>
    171e:	13 c0       	rjmp	.+38     	; 0x1746 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1720:	e9 e3       	ldi	r30, 0x39	; 57
    1722:	f0 e0       	ldi	r31, 0x00	; 0
    1724:	80 81       	ld	r24, Z
    1726:	89 83       	std	Y+1, r24	; 0x01
    1728:	0e c0       	rjmp	.+28     	; 0x1746 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    172a:	e6 e3       	ldi	r30, 0x36	; 54
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	89 83       	std	Y+1, r24	; 0x01
    1732:	09 c0       	rjmp	.+18     	; 0x1746 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1734:	e3 e3       	ldi	r30, 0x33	; 51
    1736:	f0 e0       	ldi	r31, 0x00	; 0
    1738:	80 81       	ld	r24, Z
    173a:	89 83       	std	Y+1, r24	; 0x01
    173c:	04 c0       	rjmp	.+8      	; 0x1746 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    173e:	e0 e3       	ldi	r30, 0x30	; 48
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1746:	89 81       	ldd	r24, Y+1	; 0x01
}
    1748:	0f 90       	pop	r0
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	08 95       	ret

00001756 <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1756:	1f 92       	push	r1
    1758:	0f 92       	push	r0
    175a:	0f b6       	in	r0, 0x3f	; 63
    175c:	0f 92       	push	r0
    175e:	11 24       	eor	r1, r1
    1760:	2f 93       	push	r18
    1762:	3f 93       	push	r19
    1764:	4f 93       	push	r20
    1766:	5f 93       	push	r21
    1768:	6f 93       	push	r22
    176a:	7f 93       	push	r23
    176c:	8f 93       	push	r24
    176e:	9f 93       	push	r25
    1770:	af 93       	push	r26
    1772:	bf 93       	push	r27
    1774:	ef 93       	push	r30
    1776:	ff 93       	push	r31
    1778:	df 93       	push	r29
    177a:	cf 93       	push	r28
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1780:	80 91 7d 01 	lds	r24, 0x017D
    1784:	90 91 7e 01 	lds	r25, 0x017E
    1788:	00 97       	sbiw	r24, 0x00	; 0
    178a:	29 f0       	breq	.+10     	; 0x1796 <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    178c:	e0 91 7d 01 	lds	r30, 0x017D
    1790:	f0 91 7e 01 	lds	r31, 0x017E
    1794:	09 95       	icall
	}
}
    1796:	cf 91       	pop	r28
    1798:	df 91       	pop	r29
    179a:	ff 91       	pop	r31
    179c:	ef 91       	pop	r30
    179e:	bf 91       	pop	r27
    17a0:	af 91       	pop	r26
    17a2:	9f 91       	pop	r25
    17a4:	8f 91       	pop	r24
    17a6:	7f 91       	pop	r23
    17a8:	6f 91       	pop	r22
    17aa:	5f 91       	pop	r21
    17ac:	4f 91       	pop	r20
    17ae:	3f 91       	pop	r19
    17b0:	2f 91       	pop	r18
    17b2:	0f 90       	pop	r0
    17b4:	0f be       	out	0x3f, r0	; 63
    17b6:	0f 90       	pop	r0
    17b8:	1f 90       	pop	r1
    17ba:	18 95       	reti

000017bc <Icu_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_init(const Icu_ConfigType * Config_Ptr)
{
    17bc:	df 93       	push	r29
    17be:	cf 93       	push	r28
    17c0:	00 d0       	rcall	.+0      	; 0x17c2 <Icu_init+0x6>
    17c2:	cd b7       	in	r28, 0x3d	; 61
    17c4:	de b7       	in	r29, 0x3e	; 62
    17c6:	9a 83       	std	Y+2, r25	; 0x02
    17c8:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    17ca:	a1 e3       	ldi	r26, 0x31	; 49
    17cc:	b0 e0       	ldi	r27, 0x00	; 0
    17ce:	e1 e3       	ldi	r30, 0x31	; 49
    17d0:	f0 e0       	ldi	r31, 0x00	; 0
    17d2:	80 81       	ld	r24, Z
    17d4:	8f 7b       	andi	r24, 0xBF	; 191
    17d6:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    17d8:	ef e4       	ldi	r30, 0x4F	; 79
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	8c e0       	ldi	r24, 0x0C	; 12
    17de:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    17e0:	ae e4       	ldi	r26, 0x4E	; 78
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	ee e4       	ldi	r30, 0x4E	; 78
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	98 2f       	mov	r25, r24
    17ec:	98 7f       	andi	r25, 0xF8	; 248
    17ee:	e9 81       	ldd	r30, Y+1	; 0x01
    17f0:	fa 81       	ldd	r31, Y+2	; 0x02
    17f2:	80 81       	ld	r24, Z
    17f4:	89 2b       	or	r24, r25
    17f6:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    17f8:	ae e4       	ldi	r26, 0x4E	; 78
    17fa:	b0 e0       	ldi	r27, 0x00	; 0
    17fc:	ee e4       	ldi	r30, 0x4E	; 78
    17fe:	f0 e0       	ldi	r31, 0x00	; 0
    1800:	80 81       	ld	r24, Z
    1802:	28 2f       	mov	r18, r24
    1804:	2f 7b       	andi	r18, 0xBF	; 191
    1806:	e9 81       	ldd	r30, Y+1	; 0x01
    1808:	fa 81       	ldd	r31, Y+2	; 0x02
    180a:	81 81       	ldd	r24, Z+1	; 0x01
    180c:	88 2f       	mov	r24, r24
    180e:	90 e0       	ldi	r25, 0x00	; 0
    1810:	00 24       	eor	r0, r0
    1812:	96 95       	lsr	r25
    1814:	87 95       	ror	r24
    1816:	07 94       	ror	r0
    1818:	96 95       	lsr	r25
    181a:	87 95       	ror	r24
    181c:	07 94       	ror	r0
    181e:	98 2f       	mov	r25, r24
    1820:	80 2d       	mov	r24, r0
    1822:	82 2b       	or	r24, r18
    1824:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1826:	ec e4       	ldi	r30, 0x4C	; 76
    1828:	f0 e0       	ldi	r31, 0x00	; 0
    182a:	11 82       	std	Z+1, r1	; 0x01
    182c:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    182e:	e6 e4       	ldi	r30, 0x46	; 70
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	11 82       	std	Z+1, r1	; 0x01
    1834:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1836:	a9 e5       	ldi	r26, 0x59	; 89
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e9 e5       	ldi	r30, 0x59	; 89
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	80 81       	ld	r24, Z
    1840:	80 62       	ori	r24, 0x20	; 32
    1842:	8c 93       	st	X, r24
}
    1844:	0f 90       	pop	r0
    1846:	0f 90       	pop	r0
    1848:	cf 91       	pop	r28
    184a:	df 91       	pop	r29
    184c:	08 95       	ret

0000184e <Icu_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_setCallBack(void(*a_ptr)(void))
{
    184e:	df 93       	push	r29
    1850:	cf 93       	push	r28
    1852:	00 d0       	rcall	.+0      	; 0x1854 <Icu_setCallBack+0x6>
    1854:	cd b7       	in	r28, 0x3d	; 61
    1856:	de b7       	in	r29, 0x3e	; 62
    1858:	9a 83       	std	Y+2, r25	; 0x02
    185a:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	90 93 7e 01 	sts	0x017E, r25
    1864:	80 93 7d 01 	sts	0x017D, r24
}
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <Icu_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	0f 92       	push	r0
    1878:	cd b7       	in	r28, 0x3d	; 61
    187a:	de b7       	in	r29, 0x3e	; 62
    187c:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    187e:	ae e4       	ldi	r26, 0x4E	; 78
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ee e4       	ldi	r30, 0x4E	; 78
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	28 2f       	mov	r18, r24
    188a:	2f 7b       	andi	r18, 0xBF	; 191
    188c:	89 81       	ldd	r24, Y+1	; 0x01
    188e:	88 2f       	mov	r24, r24
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	00 24       	eor	r0, r0
    1894:	96 95       	lsr	r25
    1896:	87 95       	ror	r24
    1898:	07 94       	ror	r0
    189a:	96 95       	lsr	r25
    189c:	87 95       	ror	r24
    189e:	07 94       	ror	r0
    18a0:	98 2f       	mov	r25, r24
    18a2:	80 2d       	mov	r24, r0
    18a4:	82 2b       	or	r24, r18
    18a6:	8c 93       	st	X, r24
}
    18a8:	0f 90       	pop	r0
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	08 95       	ret

000018b0 <Icu_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 Icu_getInputCaptureValue(void)
{
    18b0:	df 93       	push	r29
    18b2:	cf 93       	push	r28
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    18b8:	e6 e4       	ldi	r30, 0x46	; 70
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	91 81       	ldd	r25, Z+1	; 0x01
}
    18c0:	cf 91       	pop	r28
    18c2:	df 91       	pop	r29
    18c4:	08 95       	ret

000018c6 <Icu_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_clearTimerValue(void)
{
    18c6:	df 93       	push	r29
    18c8:	cf 93       	push	r28
    18ca:	cd b7       	in	r28, 0x3d	; 61
    18cc:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    18ce:	ec e4       	ldi	r30, 0x4C	; 76
    18d0:	f0 e0       	ldi	r31, 0x00	; 0
    18d2:	11 82       	std	Z+1, r1	; 0x01
    18d4:	10 82       	st	Z, r1
}
    18d6:	cf 91       	pop	r28
    18d8:	df 91       	pop	r29
    18da:	08 95       	ret

000018dc <Icu_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_DeInit(void)
{
    18dc:	df 93       	push	r29
    18de:	cf 93       	push	r28
    18e0:	cd b7       	in	r28, 0x3d	; 61
    18e2:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    18e4:	ef e4       	ldi	r30, 0x4F	; 79
    18e6:	f0 e0       	ldi	r31, 0x00	; 0
    18e8:	10 82       	st	Z, r1
	TCCR1B = 0;
    18ea:	ee e4       	ldi	r30, 0x4E	; 78
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	10 82       	st	Z, r1
	TCNT1 = 0;
    18f0:	ec e4       	ldi	r30, 0x4C	; 76
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	11 82       	std	Z+1, r1	; 0x01
    18f6:	10 82       	st	Z, r1
	ICR1 = 0;
    18f8:	e6 e4       	ldi	r30, 0x46	; 70
    18fa:	f0 e0       	ldi	r31, 0x00	; 0
    18fc:	11 82       	std	Z+1, r1	; 0x01
    18fe:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1900:	a9 e5       	ldi	r26, 0x59	; 89
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e9 e5       	ldi	r30, 0x59	; 89
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	8f 7d       	andi	r24, 0xDF	; 223
    190c:	8c 93       	st	X, r24
}
    190e:	cf 91       	pop	r28
    1910:	df 91       	pop	r29
    1912:	08 95       	ret

00001914 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1914:	df 93       	push	r29
    1916:	cf 93       	push	r28
    1918:	cd b7       	in	r28, 0x3d	; 61
    191a:	de b7       	in	r29, 0x3e	; 62
    191c:	2e 97       	sbiw	r28, 0x0e	; 14
    191e:	0f b6       	in	r0, 0x3f	; 63
    1920:	f8 94       	cli
    1922:	de bf       	out	0x3e, r29	; 62
    1924:	0f be       	out	0x3f, r0	; 63
    1926:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1928:	81 e0       	ldi	r24, 0x01	; 1
    192a:	60 e0       	ldi	r22, 0x00	; 0
    192c:	41 e0       	ldi	r20, 0x01	; 1
    192e:	0e 94 6d 08 	call	0x10da	; 0x10da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1932:	81 e0       	ldi	r24, 0x01	; 1
    1934:	62 e0       	ldi	r22, 0x02	; 2
    1936:	41 e0       	ldi	r20, 0x01	; 1
    1938:	0e 94 6d 08 	call	0x10da	; 0x10da <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    193c:	81 e0       	ldi	r24, 0x01	; 1
    193e:	61 e0       	ldi	r22, 0x01	; 1
    1940:	41 e0       	ldi	r20, 0x01	; 1
    1942:	0e 94 6d 08 	call	0x10da	; 0x10da <GPIO_setupPinDirection>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a0 ea       	ldi	r26, 0xA0	; 160
    194c:	b1 e4       	ldi	r27, 0x41	; 65
    194e:	8b 87       	std	Y+11, r24	; 0x0b
    1950:	9c 87       	std	Y+12, r25	; 0x0c
    1952:	ad 87       	std	Y+13, r26	; 0x0d
    1954:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1956:	6b 85       	ldd	r22, Y+11	; 0x0b
    1958:	7c 85       	ldd	r23, Y+12	; 0x0c
    195a:	8d 85       	ldd	r24, Y+13	; 0x0d
    195c:	9e 85       	ldd	r25, Y+14	; 0x0e
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a ef       	ldi	r20, 0xFA	; 250
    1964:	54 e4       	ldi	r21, 0x44	; 68
    1966:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    196a:	dc 01       	movw	r26, r24
    196c:	cb 01       	movw	r24, r22
    196e:	8f 83       	std	Y+7, r24	; 0x07
    1970:	98 87       	std	Y+8, r25	; 0x08
    1972:	a9 87       	std	Y+9, r26	; 0x09
    1974:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1976:	6f 81       	ldd	r22, Y+7	; 0x07
    1978:	78 85       	ldd	r23, Y+8	; 0x08
    197a:	89 85       	ldd	r24, Y+9	; 0x09
    197c:	9a 85       	ldd	r25, Y+10	; 0x0a
    197e:	20 e0       	ldi	r18, 0x00	; 0
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	40 e8       	ldi	r20, 0x80	; 128
    1984:	5f e3       	ldi	r21, 0x3F	; 63
    1986:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    198a:	88 23       	and	r24, r24
    198c:	2c f4       	brge	.+10     	; 0x1998 <LCD_init+0x84>
		__ticks = 1;
    198e:	81 e0       	ldi	r24, 0x01	; 1
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	9e 83       	std	Y+6, r25	; 0x06
    1994:	8d 83       	std	Y+5, r24	; 0x05
    1996:	3f c0       	rjmp	.+126    	; 0x1a16 <LCD_init+0x102>
	else if (__tmp > 65535)
    1998:	6f 81       	ldd	r22, Y+7	; 0x07
    199a:	78 85       	ldd	r23, Y+8	; 0x08
    199c:	89 85       	ldd	r24, Y+9	; 0x09
    199e:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a0:	20 e0       	ldi	r18, 0x00	; 0
    19a2:	3f ef       	ldi	r19, 0xFF	; 255
    19a4:	4f e7       	ldi	r20, 0x7F	; 127
    19a6:	57 e4       	ldi	r21, 0x47	; 71
    19a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    19ac:	18 16       	cp	r1, r24
    19ae:	4c f5       	brge	.+82     	; 0x1a02 <LCD_init+0xee>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    19b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    19b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    19b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    19b8:	20 e0       	ldi	r18, 0x00	; 0
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	40 e2       	ldi	r20, 0x20	; 32
    19be:	51 e4       	ldi	r21, 0x41	; 65
    19c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19c4:	dc 01       	movw	r26, r24
    19c6:	cb 01       	movw	r24, r22
    19c8:	bc 01       	movw	r22, r24
    19ca:	cd 01       	movw	r24, r26
    19cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	9e 83       	std	Y+6, r25	; 0x06
    19d6:	8d 83       	std	Y+5, r24	; 0x05
    19d8:	0f c0       	rjmp	.+30     	; 0x19f8 <LCD_init+0xe4>
    19da:	88 ec       	ldi	r24, 0xC8	; 200
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	9c 83       	std	Y+4, r25	; 0x04
    19e0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	9c 81       	ldd	r25, Y+4	; 0x04
    19e6:	01 97       	sbiw	r24, 0x01	; 1
    19e8:	f1 f7       	brne	.-4      	; 0x19e6 <LCD_init+0xd2>
    19ea:	9c 83       	std	Y+4, r25	; 0x04
    19ec:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19ee:	8d 81       	ldd	r24, Y+5	; 0x05
    19f0:	9e 81       	ldd	r25, Y+6	; 0x06
    19f2:	01 97       	sbiw	r24, 0x01	; 1
    19f4:	9e 83       	std	Y+6, r25	; 0x06
    19f6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f8:	8d 81       	ldd	r24, Y+5	; 0x05
    19fa:	9e 81       	ldd	r25, Y+6	; 0x06
    19fc:	00 97       	sbiw	r24, 0x00	; 0
    19fe:	69 f7       	brne	.-38     	; 0x19da <LCD_init+0xc6>
    1a00:	14 c0       	rjmp	.+40     	; 0x1a2a <LCD_init+0x116>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a02:	6f 81       	ldd	r22, Y+7	; 0x07
    1a04:	78 85       	ldd	r23, Y+8	; 0x08
    1a06:	89 85       	ldd	r24, Y+9	; 0x09
    1a08:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	9e 83       	std	Y+6, r25	; 0x06
    1a14:	8d 83       	std	Y+5, r24	; 0x05
    1a16:	8d 81       	ldd	r24, Y+5	; 0x05
    1a18:	9e 81       	ldd	r25, Y+6	; 0x06
    1a1a:	9a 83       	std	Y+2, r25	; 0x02
    1a1c:	89 83       	std	Y+1, r24	; 0x01
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
    1a20:	9a 81       	ldd	r25, Y+2	; 0x02
    1a22:	01 97       	sbiw	r24, 0x01	; 1
    1a24:	f1 f7       	brne	.-4      	; 0x1a22 <LCD_init+0x10e>
    1a26:	9a 83       	std	Y+2, r25	; 0x02
    1a28:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1a2a:	80 e0       	ldi	r24, 0x00	; 0
    1a2c:	6f ef       	ldi	r22, 0xFF	; 255
    1a2e:	0e 94 de 0a 	call	0x15bc	; 0x15bc <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1a32:	88 e3       	ldi	r24, 0x38	; 56
    1a34:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1a38:	8c e0       	ldi	r24, 0x0C	; 12
    1a3a:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_sendCommand>
}
    1a44:	2e 96       	adiw	r28, 0x0e	; 14
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
    1a50:	cf 91       	pop	r28
    1a52:	df 91       	pop	r29
    1a54:	08 95       	ret

00001a56 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	cd b7       	in	r28, 0x3d	; 61
    1a60:	de b7       	in	r29, 0x3e	; 62
    1a62:	c7 54       	subi	r28, 0x47	; 71
    1a64:	d0 40       	sbci	r29, 0x00	; 0
    1a66:	0f b6       	in	r0, 0x3f	; 63
    1a68:	f8 94       	cli
    1a6a:	de bf       	out	0x3e, r29	; 62
    1a6c:	0f be       	out	0x3f, r0	; 63
    1a6e:	cd bf       	out	0x3d, r28	; 61
    1a70:	fe 01       	movw	r30, r28
    1a72:	e9 5b       	subi	r30, 0xB9	; 185
    1a74:	ff 4f       	sbci	r31, 0xFF	; 255
    1a76:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	60 e0       	ldi	r22, 0x00	; 0
    1a7c:	40 e0       	ldi	r20, 0x00	; 0
    1a7e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePin>
    1a82:	fe 01       	movw	r30, r28
    1a84:	ed 5b       	subi	r30, 0xBD	; 189
    1a86:	ff 4f       	sbci	r31, 0xFF	; 255
    1a88:	80 e0       	ldi	r24, 0x00	; 0
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	a0 e8       	ldi	r26, 0x80	; 128
    1a8e:	bf e3       	ldi	r27, 0x3F	; 63
    1a90:	80 83       	st	Z, r24
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	a2 83       	std	Z+2, r26	; 0x02
    1a96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a98:	8e 01       	movw	r16, r28
    1a9a:	01 5c       	subi	r16, 0xC1	; 193
    1a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1a9e:	fe 01       	movw	r30, r28
    1aa0:	ed 5b       	subi	r30, 0xBD	; 189
    1aa2:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa4:	60 81       	ld	r22, Z
    1aa6:	71 81       	ldd	r23, Z+1	; 0x01
    1aa8:	82 81       	ldd	r24, Z+2	; 0x02
    1aaa:	93 81       	ldd	r25, Z+3	; 0x03
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	4a ef       	ldi	r20, 0xFA	; 250
    1ab2:	54 e4       	ldi	r21, 0x44	; 68
    1ab4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ab8:	dc 01       	movw	r26, r24
    1aba:	cb 01       	movw	r24, r22
    1abc:	f8 01       	movw	r30, r16
    1abe:	80 83       	st	Z, r24
    1ac0:	91 83       	std	Z+1, r25	; 0x01
    1ac2:	a2 83       	std	Z+2, r26	; 0x02
    1ac4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ac6:	fe 01       	movw	r30, r28
    1ac8:	ff 96       	adiw	r30, 0x3f	; 63
    1aca:	60 81       	ld	r22, Z
    1acc:	71 81       	ldd	r23, Z+1	; 0x01
    1ace:	82 81       	ldd	r24, Z+2	; 0x02
    1ad0:	93 81       	ldd	r25, Z+3	; 0x03
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	40 e8       	ldi	r20, 0x80	; 128
    1ad8:	5f e3       	ldi	r21, 0x3F	; 63
    1ada:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ade:	88 23       	and	r24, r24
    1ae0:	2c f4       	brge	.+10     	; 0x1aec <LCD_sendCommand+0x96>
		__ticks = 1;
    1ae2:	81 e0       	ldi	r24, 0x01	; 1
    1ae4:	90 e0       	ldi	r25, 0x00	; 0
    1ae6:	9e af       	std	Y+62, r25	; 0x3e
    1ae8:	8d af       	std	Y+61, r24	; 0x3d
    1aea:	46 c0       	rjmp	.+140    	; 0x1b78 <LCD_sendCommand+0x122>
	else if (__tmp > 65535)
    1aec:	fe 01       	movw	r30, r28
    1aee:	ff 96       	adiw	r30, 0x3f	; 63
    1af0:	60 81       	ld	r22, Z
    1af2:	71 81       	ldd	r23, Z+1	; 0x01
    1af4:	82 81       	ldd	r24, Z+2	; 0x02
    1af6:	93 81       	ldd	r25, Z+3	; 0x03
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	3f ef       	ldi	r19, 0xFF	; 255
    1afc:	4f e7       	ldi	r20, 0x7F	; 127
    1afe:	57 e4       	ldi	r21, 0x47	; 71
    1b00:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b04:	18 16       	cp	r1, r24
    1b06:	64 f5       	brge	.+88     	; 0x1b60 <LCD_sendCommand+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ed 5b       	subi	r30, 0xBD	; 189
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	40 e2       	ldi	r20, 0x20	; 32
    1b1c:	51 e4       	ldi	r21, 0x41	; 65
    1b1e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b2e:	dc 01       	movw	r26, r24
    1b30:	cb 01       	movw	r24, r22
    1b32:	9e af       	std	Y+62, r25	; 0x3e
    1b34:	8d af       	std	Y+61, r24	; 0x3d
    1b36:	0f c0       	rjmp	.+30     	; 0x1b56 <LCD_sendCommand+0x100>
    1b38:	88 ec       	ldi	r24, 0xC8	; 200
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	9c af       	std	Y+60, r25	; 0x3c
    1b3e:	8b af       	std	Y+59, r24	; 0x3b
    1b40:	8b ad       	ldd	r24, Y+59	; 0x3b
    1b42:	9c ad       	ldd	r25, Y+60	; 0x3c
    1b44:	01 97       	sbiw	r24, 0x01	; 1
    1b46:	f1 f7       	brne	.-4      	; 0x1b44 <LCD_sendCommand+0xee>
    1b48:	9c af       	std	Y+60, r25	; 0x3c
    1b4a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	9e af       	std	Y+62, r25	; 0x3e
    1b54:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b56:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b58:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b5a:	00 97       	sbiw	r24, 0x00	; 0
    1b5c:	69 f7       	brne	.-38     	; 0x1b38 <LCD_sendCommand+0xe2>
    1b5e:	16 c0       	rjmp	.+44     	; 0x1b8c <LCD_sendCommand+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b60:	fe 01       	movw	r30, r28
    1b62:	ff 96       	adiw	r30, 0x3f	; 63
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b70:	dc 01       	movw	r26, r24
    1b72:	cb 01       	movw	r24, r22
    1b74:	9e af       	std	Y+62, r25	; 0x3e
    1b76:	8d af       	std	Y+61, r24	; 0x3d
    1b78:	8d ad       	ldd	r24, Y+61	; 0x3d
    1b7a:	9e ad       	ldd	r25, Y+62	; 0x3e
    1b7c:	9a af       	std	Y+58, r25	; 0x3a
    1b7e:	89 af       	std	Y+57, r24	; 0x39
    1b80:	89 ad       	ldd	r24, Y+57	; 0x39
    1b82:	9a ad       	ldd	r25, Y+58	; 0x3a
    1b84:	01 97       	sbiw	r24, 0x01	; 1
    1b86:	f1 f7       	brne	.-4      	; 0x1b84 <LCD_sendCommand+0x12e>
    1b88:	9a af       	std	Y+58, r25	; 0x3a
    1b8a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1b8c:	81 e0       	ldi	r24, 0x01	; 1
    1b8e:	61 e0       	ldi	r22, 0x01	; 1
    1b90:	40 e0       	ldi	r20, 0x00	; 0
    1b92:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePin>
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a0 e8       	ldi	r26, 0x80	; 128
    1b9c:	bf e3       	ldi	r27, 0x3F	; 63
    1b9e:	8d ab       	std	Y+53, r24	; 0x35
    1ba0:	9e ab       	std	Y+54, r25	; 0x36
    1ba2:	af ab       	std	Y+55, r26	; 0x37
    1ba4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba6:	6d a9       	ldd	r22, Y+53	; 0x35
    1ba8:	7e a9       	ldd	r23, Y+54	; 0x36
    1baa:	8f a9       	ldd	r24, Y+55	; 0x37
    1bac:	98 ad       	ldd	r25, Y+56	; 0x38
    1bae:	20 e0       	ldi	r18, 0x00	; 0
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	4a ef       	ldi	r20, 0xFA	; 250
    1bb4:	54 e4       	ldi	r21, 0x44	; 68
    1bb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	89 ab       	std	Y+49, r24	; 0x31
    1bc0:	9a ab       	std	Y+50, r25	; 0x32
    1bc2:	ab ab       	std	Y+51, r26	; 0x33
    1bc4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1bc6:	69 a9       	ldd	r22, Y+49	; 0x31
    1bc8:	7a a9       	ldd	r23, Y+50	; 0x32
    1bca:	8b a9       	ldd	r24, Y+51	; 0x33
    1bcc:	9c a9       	ldd	r25, Y+52	; 0x34
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1bda:	88 23       	and	r24, r24
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <LCD_sendCommand+0x192>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	98 ab       	std	Y+48, r25	; 0x30
    1be4:	8f a7       	std	Y+47, r24	; 0x2f
    1be6:	3f c0       	rjmp	.+126    	; 0x1c66 <LCD_sendCommand+0x210>
	else if (__tmp > 65535)
    1be8:	69 a9       	ldd	r22, Y+49	; 0x31
    1bea:	7a a9       	ldd	r23, Y+50	; 0x32
    1bec:	8b a9       	ldd	r24, Y+51	; 0x33
    1bee:	9c a9       	ldd	r25, Y+52	; 0x34
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	4c f5       	brge	.+82     	; 0x1c52 <LCD_sendCommand+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c00:	6d a9       	ldd	r22, Y+53	; 0x35
    1c02:	7e a9       	ldd	r23, Y+54	; 0x36
    1c04:	8f a9       	ldd	r24, Y+55	; 0x37
    1c06:	98 ad       	ldd	r25, Y+56	; 0x38
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e2       	ldi	r20, 0x20	; 32
    1c0e:	51 e4       	ldi	r21, 0x41	; 65
    1c10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	98 ab       	std	Y+48, r25	; 0x30
    1c26:	8f a7       	std	Y+47, r24	; 0x2f
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <LCD_sendCommand+0x1f2>
    1c2a:	88 ec       	ldi	r24, 0xC8	; 200
    1c2c:	90 e0       	ldi	r25, 0x00	; 0
    1c2e:	9e a7       	std	Y+46, r25	; 0x2e
    1c30:	8d a7       	std	Y+45, r24	; 0x2d
    1c32:	8d a5       	ldd	r24, Y+45	; 0x2d
    1c34:	9e a5       	ldd	r25, Y+46	; 0x2e
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <LCD_sendCommand+0x1e0>
    1c3a:	9e a7       	std	Y+46, r25	; 0x2e
    1c3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c40:	98 a9       	ldd	r25, Y+48	; 0x30
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	98 ab       	std	Y+48, r25	; 0x30
    1c46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c4a:	98 a9       	ldd	r25, Y+48	; 0x30
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	69 f7       	brne	.-38     	; 0x1c2a <LCD_sendCommand+0x1d4>
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <LCD_sendCommand+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c52:	69 a9       	ldd	r22, Y+49	; 0x31
    1c54:	7a a9       	ldd	r23, Y+50	; 0x32
    1c56:	8b a9       	ldd	r24, Y+51	; 0x33
    1c58:	9c a9       	ldd	r25, Y+52	; 0x34
    1c5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	98 ab       	std	Y+48, r25	; 0x30
    1c64:	8f a7       	std	Y+47, r24	; 0x2f
    1c66:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c68:	98 a9       	ldd	r25, Y+48	; 0x30
    1c6a:	9c a7       	std	Y+44, r25	; 0x2c
    1c6c:	8b a7       	std	Y+43, r24	; 0x2b
    1c6e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1c70:	9c a5       	ldd	r25, Y+44	; 0x2c
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <LCD_sendCommand+0x21c>
    1c76:	9c a7       	std	Y+44, r25	; 0x2c
    1c78:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1c7a:	81 e0       	ldi	r24, 0x01	; 1
    1c7c:	62 e0       	ldi	r22, 0x02	; 2
    1c7e:	41 e0       	ldi	r20, 0x01	; 1
    1c80:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePin>
    1c84:	80 e0       	ldi	r24, 0x00	; 0
    1c86:	90 e0       	ldi	r25, 0x00	; 0
    1c88:	a0 e8       	ldi	r26, 0x80	; 128
    1c8a:	bf e3       	ldi	r27, 0x3F	; 63
    1c8c:	8f a3       	std	Y+39, r24	; 0x27
    1c8e:	98 a7       	std	Y+40, r25	; 0x28
    1c90:	a9 a7       	std	Y+41, r26	; 0x29
    1c92:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c94:	6f a1       	ldd	r22, Y+39	; 0x27
    1c96:	78 a5       	ldd	r23, Y+40	; 0x28
    1c98:	89 a5       	ldd	r24, Y+41	; 0x29
    1c9a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c9c:	20 e0       	ldi	r18, 0x00	; 0
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	4a ef       	ldi	r20, 0xFA	; 250
    1ca2:	54 e4       	ldi	r21, 0x44	; 68
    1ca4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ca8:	dc 01       	movw	r26, r24
    1caa:	cb 01       	movw	r24, r22
    1cac:	8b a3       	std	Y+35, r24	; 0x23
    1cae:	9c a3       	std	Y+36, r25	; 0x24
    1cb0:	ad a3       	std	Y+37, r26	; 0x25
    1cb2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1cb4:	6b a1       	ldd	r22, Y+35	; 0x23
    1cb6:	7c a1       	ldd	r23, Y+36	; 0x24
    1cb8:	8d a1       	ldd	r24, Y+37	; 0x25
    1cba:	9e a1       	ldd	r25, Y+38	; 0x26
    1cbc:	20 e0       	ldi	r18, 0x00	; 0
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	40 e8       	ldi	r20, 0x80	; 128
    1cc2:	5f e3       	ldi	r21, 0x3F	; 63
    1cc4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1cc8:	88 23       	and	r24, r24
    1cca:	2c f4       	brge	.+10     	; 0x1cd6 <LCD_sendCommand+0x280>
		__ticks = 1;
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	90 e0       	ldi	r25, 0x00	; 0
    1cd0:	9a a3       	std	Y+34, r25	; 0x22
    1cd2:	89 a3       	std	Y+33, r24	; 0x21
    1cd4:	3f c0       	rjmp	.+126    	; 0x1d54 <LCD_sendCommand+0x2fe>
	else if (__tmp > 65535)
    1cd6:	6b a1       	ldd	r22, Y+35	; 0x23
    1cd8:	7c a1       	ldd	r23, Y+36	; 0x24
    1cda:	8d a1       	ldd	r24, Y+37	; 0x25
    1cdc:	9e a1       	ldd	r25, Y+38	; 0x26
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	3f ef       	ldi	r19, 0xFF	; 255
    1ce2:	4f e7       	ldi	r20, 0x7F	; 127
    1ce4:	57 e4       	ldi	r21, 0x47	; 71
    1ce6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cea:	18 16       	cp	r1, r24
    1cec:	4c f5       	brge	.+82     	; 0x1d40 <LCD_sendCommand+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cee:	6f a1       	ldd	r22, Y+39	; 0x27
    1cf0:	78 a5       	ldd	r23, Y+40	; 0x28
    1cf2:	89 a5       	ldd	r24, Y+41	; 0x29
    1cf4:	9a a5       	ldd	r25, Y+42	; 0x2a
    1cf6:	20 e0       	ldi	r18, 0x00	; 0
    1cf8:	30 e0       	ldi	r19, 0x00	; 0
    1cfa:	40 e2       	ldi	r20, 0x20	; 32
    1cfc:	51 e4       	ldi	r21, 0x41	; 65
    1cfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	bc 01       	movw	r22, r24
    1d08:	cd 01       	movw	r24, r26
    1d0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d0e:	dc 01       	movw	r26, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	9a a3       	std	Y+34, r25	; 0x22
    1d14:	89 a3       	std	Y+33, r24	; 0x21
    1d16:	0f c0       	rjmp	.+30     	; 0x1d36 <LCD_sendCommand+0x2e0>
    1d18:	88 ec       	ldi	r24, 0xC8	; 200
    1d1a:	90 e0       	ldi	r25, 0x00	; 0
    1d1c:	98 a3       	std	Y+32, r25	; 0x20
    1d1e:	8f 8f       	std	Y+31, r24	; 0x1f
    1d20:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1d22:	98 a1       	ldd	r25, Y+32	; 0x20
    1d24:	01 97       	sbiw	r24, 0x01	; 1
    1d26:	f1 f7       	brne	.-4      	; 0x1d24 <LCD_sendCommand+0x2ce>
    1d28:	98 a3       	std	Y+32, r25	; 0x20
    1d2a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d2c:	89 a1       	ldd	r24, Y+33	; 0x21
    1d2e:	9a a1       	ldd	r25, Y+34	; 0x22
    1d30:	01 97       	sbiw	r24, 0x01	; 1
    1d32:	9a a3       	std	Y+34, r25	; 0x22
    1d34:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d36:	89 a1       	ldd	r24, Y+33	; 0x21
    1d38:	9a a1       	ldd	r25, Y+34	; 0x22
    1d3a:	00 97       	sbiw	r24, 0x00	; 0
    1d3c:	69 f7       	brne	.-38     	; 0x1d18 <LCD_sendCommand+0x2c2>
    1d3e:	14 c0       	rjmp	.+40     	; 0x1d68 <LCD_sendCommand+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d40:	6b a1       	ldd	r22, Y+35	; 0x23
    1d42:	7c a1       	ldd	r23, Y+36	; 0x24
    1d44:	8d a1       	ldd	r24, Y+37	; 0x25
    1d46:	9e a1       	ldd	r25, Y+38	; 0x26
    1d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d4c:	dc 01       	movw	r26, r24
    1d4e:	cb 01       	movw	r24, r22
    1d50:	9a a3       	std	Y+34, r25	; 0x22
    1d52:	89 a3       	std	Y+33, r24	; 0x21
    1d54:	89 a1       	ldd	r24, Y+33	; 0x21
    1d56:	9a a1       	ldd	r25, Y+34	; 0x22
    1d58:	9e 8f       	std	Y+30, r25	; 0x1e
    1d5a:	8d 8f       	std	Y+29, r24	; 0x1d
    1d5c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d5e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d60:	01 97       	sbiw	r24, 0x01	; 1
    1d62:	f1 f7       	brne	.-4      	; 0x1d60 <LCD_sendCommand+0x30a>
    1d64:	9e 8f       	std	Y+30, r25	; 0x1e
    1d66:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1d68:	fe 01       	movw	r30, r28
    1d6a:	e9 5b       	subi	r30, 0xB9	; 185
    1d6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6e:	80 e0       	ldi	r24, 0x00	; 0
    1d70:	60 81       	ld	r22, Z
    1d72:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePort>
    1d76:	80 e0       	ldi	r24, 0x00	; 0
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	a0 e8       	ldi	r26, 0x80	; 128
    1d7c:	bf e3       	ldi	r27, 0x3F	; 63
    1d7e:	89 8f       	std	Y+25, r24	; 0x19
    1d80:	9a 8f       	std	Y+26, r25	; 0x1a
    1d82:	ab 8f       	std	Y+27, r26	; 0x1b
    1d84:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d86:	69 8d       	ldd	r22, Y+25	; 0x19
    1d88:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d8a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d8c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	30 e0       	ldi	r19, 0x00	; 0
    1d92:	4a ef       	ldi	r20, 0xFA	; 250
    1d94:	54 e4       	ldi	r21, 0x44	; 68
    1d96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d9a:	dc 01       	movw	r26, r24
    1d9c:	cb 01       	movw	r24, r22
    1d9e:	8d 8b       	std	Y+21, r24	; 0x15
    1da0:	9e 8b       	std	Y+22, r25	; 0x16
    1da2:	af 8b       	std	Y+23, r26	; 0x17
    1da4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1da6:	6d 89       	ldd	r22, Y+21	; 0x15
    1da8:	7e 89       	ldd	r23, Y+22	; 0x16
    1daa:	8f 89       	ldd	r24, Y+23	; 0x17
    1dac:	98 8d       	ldd	r25, Y+24	; 0x18
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e8       	ldi	r20, 0x80	; 128
    1db4:	5f e3       	ldi	r21, 0x3F	; 63
    1db6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1dba:	88 23       	and	r24, r24
    1dbc:	2c f4       	brge	.+10     	; 0x1dc8 <LCD_sendCommand+0x372>
		__ticks = 1;
    1dbe:	81 e0       	ldi	r24, 0x01	; 1
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	9c 8b       	std	Y+20, r25	; 0x14
    1dc4:	8b 8b       	std	Y+19, r24	; 0x13
    1dc6:	3f c0       	rjmp	.+126    	; 0x1e46 <LCD_sendCommand+0x3f0>
	else if (__tmp > 65535)
    1dc8:	6d 89       	ldd	r22, Y+21	; 0x15
    1dca:	7e 89       	ldd	r23, Y+22	; 0x16
    1dcc:	8f 89       	ldd	r24, Y+23	; 0x17
    1dce:	98 8d       	ldd	r25, Y+24	; 0x18
    1dd0:	20 e0       	ldi	r18, 0x00	; 0
    1dd2:	3f ef       	ldi	r19, 0xFF	; 255
    1dd4:	4f e7       	ldi	r20, 0x7F	; 127
    1dd6:	57 e4       	ldi	r21, 0x47	; 71
    1dd8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ddc:	18 16       	cp	r1, r24
    1dde:	4c f5       	brge	.+82     	; 0x1e32 <LCD_sendCommand+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1de0:	69 8d       	ldd	r22, Y+25	; 0x19
    1de2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1de4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1de6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1de8:	20 e0       	ldi	r18, 0x00	; 0
    1dea:	30 e0       	ldi	r19, 0x00	; 0
    1dec:	40 e2       	ldi	r20, 0x20	; 32
    1dee:	51 e4       	ldi	r21, 0x41	; 65
    1df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1df4:	dc 01       	movw	r26, r24
    1df6:	cb 01       	movw	r24, r22
    1df8:	bc 01       	movw	r22, r24
    1dfa:	cd 01       	movw	r24, r26
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	9c 8b       	std	Y+20, r25	; 0x14
    1e06:	8b 8b       	std	Y+19, r24	; 0x13
    1e08:	0f c0       	rjmp	.+30     	; 0x1e28 <LCD_sendCommand+0x3d2>
    1e0a:	88 ec       	ldi	r24, 0xC8	; 200
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	9a 8b       	std	Y+18, r25	; 0x12
    1e10:	89 8b       	std	Y+17, r24	; 0x11
    1e12:	89 89       	ldd	r24, Y+17	; 0x11
    1e14:	9a 89       	ldd	r25, Y+18	; 0x12
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_sendCommand+0x3c0>
    1e1a:	9a 8b       	std	Y+18, r25	; 0x12
    1e1c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e1e:	8b 89       	ldd	r24, Y+19	; 0x13
    1e20:	9c 89       	ldd	r25, Y+20	; 0x14
    1e22:	01 97       	sbiw	r24, 0x01	; 1
    1e24:	9c 8b       	std	Y+20, r25	; 0x14
    1e26:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e28:	8b 89       	ldd	r24, Y+19	; 0x13
    1e2a:	9c 89       	ldd	r25, Y+20	; 0x14
    1e2c:	00 97       	sbiw	r24, 0x00	; 0
    1e2e:	69 f7       	brne	.-38     	; 0x1e0a <LCD_sendCommand+0x3b4>
    1e30:	14 c0       	rjmp	.+40     	; 0x1e5a <LCD_sendCommand+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e32:	6d 89       	ldd	r22, Y+21	; 0x15
    1e34:	7e 89       	ldd	r23, Y+22	; 0x16
    1e36:	8f 89       	ldd	r24, Y+23	; 0x17
    1e38:	98 8d       	ldd	r25, Y+24	; 0x18
    1e3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	9c 8b       	std	Y+20, r25	; 0x14
    1e44:	8b 8b       	std	Y+19, r24	; 0x13
    1e46:	8b 89       	ldd	r24, Y+19	; 0x13
    1e48:	9c 89       	ldd	r25, Y+20	; 0x14
    1e4a:	98 8b       	std	Y+16, r25	; 0x10
    1e4c:	8f 87       	std	Y+15, r24	; 0x0f
    1e4e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e50:	98 89       	ldd	r25, Y+16	; 0x10
    1e52:	01 97       	sbiw	r24, 0x01	; 1
    1e54:	f1 f7       	brne	.-4      	; 0x1e52 <LCD_sendCommand+0x3fc>
    1e56:	98 8b       	std	Y+16, r25	; 0x10
    1e58:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1e5a:	81 e0       	ldi	r24, 0x01	; 1
    1e5c:	62 e0       	ldi	r22, 0x02	; 2
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePin>
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	a0 e8       	ldi	r26, 0x80	; 128
    1e6a:	bf e3       	ldi	r27, 0x3F	; 63
    1e6c:	8b 87       	std	Y+11, r24	; 0x0b
    1e6e:	9c 87       	std	Y+12, r25	; 0x0c
    1e70:	ad 87       	std	Y+13, r26	; 0x0d
    1e72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e74:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e76:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e78:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e7c:	20 e0       	ldi	r18, 0x00	; 0
    1e7e:	30 e0       	ldi	r19, 0x00	; 0
    1e80:	4a ef       	ldi	r20, 0xFA	; 250
    1e82:	54 e4       	ldi	r21, 0x44	; 68
    1e84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e88:	dc 01       	movw	r26, r24
    1e8a:	cb 01       	movw	r24, r22
    1e8c:	8f 83       	std	Y+7, r24	; 0x07
    1e8e:	98 87       	std	Y+8, r25	; 0x08
    1e90:	a9 87       	std	Y+9, r26	; 0x09
    1e92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e94:	6f 81       	ldd	r22, Y+7	; 0x07
    1e96:	78 85       	ldd	r23, Y+8	; 0x08
    1e98:	89 85       	ldd	r24, Y+9	; 0x09
    1e9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e9c:	20 e0       	ldi	r18, 0x00	; 0
    1e9e:	30 e0       	ldi	r19, 0x00	; 0
    1ea0:	40 e8       	ldi	r20, 0x80	; 128
    1ea2:	5f e3       	ldi	r21, 0x3F	; 63
    1ea4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ea8:	88 23       	and	r24, r24
    1eaa:	2c f4       	brge	.+10     	; 0x1eb6 <LCD_sendCommand+0x460>
		__ticks = 1;
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	9e 83       	std	Y+6, r25	; 0x06
    1eb2:	8d 83       	std	Y+5, r24	; 0x05
    1eb4:	3f c0       	rjmp	.+126    	; 0x1f34 <LCD_sendCommand+0x4de>
	else if (__tmp > 65535)
    1eb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1eb8:	78 85       	ldd	r23, Y+8	; 0x08
    1eba:	89 85       	ldd	r24, Y+9	; 0x09
    1ebc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	3f ef       	ldi	r19, 0xFF	; 255
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	57 e4       	ldi	r21, 0x47	; 71
    1ec6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	4c f5       	brge	.+82     	; 0x1f20 <LCD_sendCommand+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ece:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ed0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ed2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ed4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ed6:	20 e0       	ldi	r18, 0x00	; 0
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	40 e2       	ldi	r20, 0x20	; 32
    1edc:	51 e4       	ldi	r21, 0x41	; 65
    1ede:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ee2:	dc 01       	movw	r26, r24
    1ee4:	cb 01       	movw	r24, r22
    1ee6:	bc 01       	movw	r22, r24
    1ee8:	cd 01       	movw	r24, r26
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9e 83       	std	Y+6, r25	; 0x06
    1ef4:	8d 83       	std	Y+5, r24	; 0x05
    1ef6:	0f c0       	rjmp	.+30     	; 0x1f16 <LCD_sendCommand+0x4c0>
    1ef8:	88 ec       	ldi	r24, 0xC8	; 200
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 83       	std	Y+4, r25	; 0x04
    1efe:	8b 83       	std	Y+3, r24	; 0x03
    1f00:	8b 81       	ldd	r24, Y+3	; 0x03
    1f02:	9c 81       	ldd	r25, Y+4	; 0x04
    1f04:	01 97       	sbiw	r24, 0x01	; 1
    1f06:	f1 f7       	brne	.-4      	; 0x1f04 <LCD_sendCommand+0x4ae>
    1f08:	9c 83       	std	Y+4, r25	; 0x04
    1f0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	01 97       	sbiw	r24, 0x01	; 1
    1f12:	9e 83       	std	Y+6, r25	; 0x06
    1f14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f16:	8d 81       	ldd	r24, Y+5	; 0x05
    1f18:	9e 81       	ldd	r25, Y+6	; 0x06
    1f1a:	00 97       	sbiw	r24, 0x00	; 0
    1f1c:	69 f7       	brne	.-38     	; 0x1ef8 <LCD_sendCommand+0x4a2>
    1f1e:	14 c0       	rjmp	.+40     	; 0x1f48 <LCD_sendCommand+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f20:	6f 81       	ldd	r22, Y+7	; 0x07
    1f22:	78 85       	ldd	r23, Y+8	; 0x08
    1f24:	89 85       	ldd	r24, Y+9	; 0x09
    1f26:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f2c:	dc 01       	movw	r26, r24
    1f2e:	cb 01       	movw	r24, r22
    1f30:	9e 83       	std	Y+6, r25	; 0x06
    1f32:	8d 83       	std	Y+5, r24	; 0x05
    1f34:	8d 81       	ldd	r24, Y+5	; 0x05
    1f36:	9e 81       	ldd	r25, Y+6	; 0x06
    1f38:	9a 83       	std	Y+2, r25	; 0x02
    1f3a:	89 83       	std	Y+1, r24	; 0x01
    1f3c:	89 81       	ldd	r24, Y+1	; 0x01
    1f3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f40:	01 97       	sbiw	r24, 0x01	; 1
    1f42:	f1 f7       	brne	.-4      	; 0x1f40 <LCD_sendCommand+0x4ea>
    1f44:	9a 83       	std	Y+2, r25	; 0x02
    1f46:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1f48:	c9 5b       	subi	r28, 0xB9	; 185
    1f4a:	df 4f       	sbci	r29, 0xFF	; 255
    1f4c:	0f b6       	in	r0, 0x3f	; 63
    1f4e:	f8 94       	cli
    1f50:	de bf       	out	0x3e, r29	; 62
    1f52:	0f be       	out	0x3f, r0	; 63
    1f54:	cd bf       	out	0x3d, r28	; 61
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	1f 91       	pop	r17
    1f5c:	0f 91       	pop	r16
    1f5e:	08 95       	ret

00001f60 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    1f60:	0f 93       	push	r16
    1f62:	1f 93       	push	r17
    1f64:	df 93       	push	r29
    1f66:	cf 93       	push	r28
    1f68:	cd b7       	in	r28, 0x3d	; 61
    1f6a:	de b7       	in	r29, 0x3e	; 62
    1f6c:	c7 54       	subi	r28, 0x47	; 71
    1f6e:	d0 40       	sbci	r29, 0x00	; 0
    1f70:	0f b6       	in	r0, 0x3f	; 63
    1f72:	f8 94       	cli
    1f74:	de bf       	out	0x3e, r29	; 62
    1f76:	0f be       	out	0x3f, r0	; 63
    1f78:	cd bf       	out	0x3d, r28	; 61
    1f7a:	fe 01       	movw	r30, r28
    1f7c:	e9 5b       	subi	r30, 0xB9	; 185
    1f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f80:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    1f82:	81 e0       	ldi	r24, 0x01	; 1
    1f84:	60 e0       	ldi	r22, 0x00	; 0
    1f86:	41 e0       	ldi	r20, 0x01	; 1
    1f88:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePin>
    1f8c:	fe 01       	movw	r30, r28
    1f8e:	ed 5b       	subi	r30, 0xBD	; 189
    1f90:	ff 4f       	sbci	r31, 0xFF	; 255
    1f92:	80 e0       	ldi	r24, 0x00	; 0
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	a0 e8       	ldi	r26, 0x80	; 128
    1f98:	bf e3       	ldi	r27, 0x3F	; 63
    1f9a:	80 83       	st	Z, r24
    1f9c:	91 83       	std	Z+1, r25	; 0x01
    1f9e:	a2 83       	std	Z+2, r26	; 0x02
    1fa0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa2:	8e 01       	movw	r16, r28
    1fa4:	01 5c       	subi	r16, 0xC1	; 193
    1fa6:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa8:	fe 01       	movw	r30, r28
    1faa:	ed 5b       	subi	r30, 0xBD	; 189
    1fac:	ff 4f       	sbci	r31, 0xFF	; 255
    1fae:	60 81       	ld	r22, Z
    1fb0:	71 81       	ldd	r23, Z+1	; 0x01
    1fb2:	82 81       	ldd	r24, Z+2	; 0x02
    1fb4:	93 81       	ldd	r25, Z+3	; 0x03
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	4a ef       	ldi	r20, 0xFA	; 250
    1fbc:	54 e4       	ldi	r21, 0x44	; 68
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	f8 01       	movw	r30, r16
    1fc8:	80 83       	st	Z, r24
    1fca:	91 83       	std	Z+1, r25	; 0x01
    1fcc:	a2 83       	std	Z+2, r26	; 0x02
    1fce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1fd0:	fe 01       	movw	r30, r28
    1fd2:	ff 96       	adiw	r30, 0x3f	; 63
    1fd4:	60 81       	ld	r22, Z
    1fd6:	71 81       	ldd	r23, Z+1	; 0x01
    1fd8:	82 81       	ldd	r24, Z+2	; 0x02
    1fda:	93 81       	ldd	r25, Z+3	; 0x03
    1fdc:	20 e0       	ldi	r18, 0x00	; 0
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	40 e8       	ldi	r20, 0x80	; 128
    1fe2:	5f e3       	ldi	r21, 0x3F	; 63
    1fe4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fe8:	88 23       	and	r24, r24
    1fea:	2c f4       	brge	.+10     	; 0x1ff6 <LCD_displayCharacter+0x96>
		__ticks = 1;
    1fec:	81 e0       	ldi	r24, 0x01	; 1
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	9e af       	std	Y+62, r25	; 0x3e
    1ff2:	8d af       	std	Y+61, r24	; 0x3d
    1ff4:	46 c0       	rjmp	.+140    	; 0x2082 <LCD_displayCharacter+0x122>
	else if (__tmp > 65535)
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ff 96       	adiw	r30, 0x3f	; 63
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	82 81       	ldd	r24, Z+2	; 0x02
    2000:	93 81       	ldd	r25, Z+3	; 0x03
    2002:	20 e0       	ldi	r18, 0x00	; 0
    2004:	3f ef       	ldi	r19, 0xFF	; 255
    2006:	4f e7       	ldi	r20, 0x7F	; 127
    2008:	57 e4       	ldi	r21, 0x47	; 71
    200a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    200e:	18 16       	cp	r1, r24
    2010:	64 f5       	brge	.+88     	; 0x206a <LCD_displayCharacter+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2012:	fe 01       	movw	r30, r28
    2014:	ed 5b       	subi	r30, 0xBD	; 189
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	60 81       	ld	r22, Z
    201a:	71 81       	ldd	r23, Z+1	; 0x01
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	20 e0       	ldi	r18, 0x00	; 0
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	40 e2       	ldi	r20, 0x20	; 32
    2026:	51 e4       	ldi	r21, 0x41	; 65
    2028:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    202c:	dc 01       	movw	r26, r24
    202e:	cb 01       	movw	r24, r22
    2030:	bc 01       	movw	r22, r24
    2032:	cd 01       	movw	r24, r26
    2034:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2038:	dc 01       	movw	r26, r24
    203a:	cb 01       	movw	r24, r22
    203c:	9e af       	std	Y+62, r25	; 0x3e
    203e:	8d af       	std	Y+61, r24	; 0x3d
    2040:	0f c0       	rjmp	.+30     	; 0x2060 <LCD_displayCharacter+0x100>
    2042:	88 ec       	ldi	r24, 0xC8	; 200
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	9c af       	std	Y+60, r25	; 0x3c
    2048:	8b af       	std	Y+59, r24	; 0x3b
    204a:	8b ad       	ldd	r24, Y+59	; 0x3b
    204c:	9c ad       	ldd	r25, Y+60	; 0x3c
    204e:	01 97       	sbiw	r24, 0x01	; 1
    2050:	f1 f7       	brne	.-4      	; 0x204e <LCD_displayCharacter+0xee>
    2052:	9c af       	std	Y+60, r25	; 0x3c
    2054:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2056:	8d ad       	ldd	r24, Y+61	; 0x3d
    2058:	9e ad       	ldd	r25, Y+62	; 0x3e
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	9e af       	std	Y+62, r25	; 0x3e
    205e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2060:	8d ad       	ldd	r24, Y+61	; 0x3d
    2062:	9e ad       	ldd	r25, Y+62	; 0x3e
    2064:	00 97       	sbiw	r24, 0x00	; 0
    2066:	69 f7       	brne	.-38     	; 0x2042 <LCD_displayCharacter+0xe2>
    2068:	16 c0       	rjmp	.+44     	; 0x2096 <LCD_displayCharacter+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    206a:	fe 01       	movw	r30, r28
    206c:	ff 96       	adiw	r30, 0x3f	; 63
    206e:	60 81       	ld	r22, Z
    2070:	71 81       	ldd	r23, Z+1	; 0x01
    2072:	82 81       	ldd	r24, Z+2	; 0x02
    2074:	93 81       	ldd	r25, Z+3	; 0x03
    2076:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    207a:	dc 01       	movw	r26, r24
    207c:	cb 01       	movw	r24, r22
    207e:	9e af       	std	Y+62, r25	; 0x3e
    2080:	8d af       	std	Y+61, r24	; 0x3d
    2082:	8d ad       	ldd	r24, Y+61	; 0x3d
    2084:	9e ad       	ldd	r25, Y+62	; 0x3e
    2086:	9a af       	std	Y+58, r25	; 0x3a
    2088:	89 af       	std	Y+57, r24	; 0x39
    208a:	89 ad       	ldd	r24, Y+57	; 0x39
    208c:	9a ad       	ldd	r25, Y+58	; 0x3a
    208e:	01 97       	sbiw	r24, 0x01	; 1
    2090:	f1 f7       	brne	.-4      	; 0x208e <LCD_displayCharacter+0x12e>
    2092:	9a af       	std	Y+58, r25	; 0x3a
    2094:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    2096:	81 e0       	ldi	r24, 0x01	; 1
    2098:	61 e0       	ldi	r22, 0x01	; 1
    209a:	40 e0       	ldi	r20, 0x00	; 0
    209c:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePin>
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	a0 e8       	ldi	r26, 0x80	; 128
    20a6:	bf e3       	ldi	r27, 0x3F	; 63
    20a8:	8d ab       	std	Y+53, r24	; 0x35
    20aa:	9e ab       	std	Y+54, r25	; 0x36
    20ac:	af ab       	std	Y+55, r26	; 0x37
    20ae:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b0:	6d a9       	ldd	r22, Y+53	; 0x35
    20b2:	7e a9       	ldd	r23, Y+54	; 0x36
    20b4:	8f a9       	ldd	r24, Y+55	; 0x37
    20b6:	98 ad       	ldd	r25, Y+56	; 0x38
    20b8:	20 e0       	ldi	r18, 0x00	; 0
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	4a ef       	ldi	r20, 0xFA	; 250
    20be:	54 e4       	ldi	r21, 0x44	; 68
    20c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c4:	dc 01       	movw	r26, r24
    20c6:	cb 01       	movw	r24, r22
    20c8:	89 ab       	std	Y+49, r24	; 0x31
    20ca:	9a ab       	std	Y+50, r25	; 0x32
    20cc:	ab ab       	std	Y+51, r26	; 0x33
    20ce:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    20d0:	69 a9       	ldd	r22, Y+49	; 0x31
    20d2:	7a a9       	ldd	r23, Y+50	; 0x32
    20d4:	8b a9       	ldd	r24, Y+51	; 0x33
    20d6:	9c a9       	ldd	r25, Y+52	; 0x34
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	30 e0       	ldi	r19, 0x00	; 0
    20dc:	40 e8       	ldi	r20, 0x80	; 128
    20de:	5f e3       	ldi	r21, 0x3F	; 63
    20e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e4:	88 23       	and	r24, r24
    20e6:	2c f4       	brge	.+10     	; 0x20f2 <LCD_displayCharacter+0x192>
		__ticks = 1;
    20e8:	81 e0       	ldi	r24, 0x01	; 1
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	98 ab       	std	Y+48, r25	; 0x30
    20ee:	8f a7       	std	Y+47, r24	; 0x2f
    20f0:	3f c0       	rjmp	.+126    	; 0x2170 <LCD_displayCharacter+0x210>
	else if (__tmp > 65535)
    20f2:	69 a9       	ldd	r22, Y+49	; 0x31
    20f4:	7a a9       	ldd	r23, Y+50	; 0x32
    20f6:	8b a9       	ldd	r24, Y+51	; 0x33
    20f8:	9c a9       	ldd	r25, Y+52	; 0x34
    20fa:	20 e0       	ldi	r18, 0x00	; 0
    20fc:	3f ef       	ldi	r19, 0xFF	; 255
    20fe:	4f e7       	ldi	r20, 0x7F	; 127
    2100:	57 e4       	ldi	r21, 0x47	; 71
    2102:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2106:	18 16       	cp	r1, r24
    2108:	4c f5       	brge	.+82     	; 0x215c <LCD_displayCharacter+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210a:	6d a9       	ldd	r22, Y+53	; 0x35
    210c:	7e a9       	ldd	r23, Y+54	; 0x36
    210e:	8f a9       	ldd	r24, Y+55	; 0x37
    2110:	98 ad       	ldd	r25, Y+56	; 0x38
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	30 e0       	ldi	r19, 0x00	; 0
    2116:	40 e2       	ldi	r20, 0x20	; 32
    2118:	51 e4       	ldi	r21, 0x41	; 65
    211a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    211e:	dc 01       	movw	r26, r24
    2120:	cb 01       	movw	r24, r22
    2122:	bc 01       	movw	r22, r24
    2124:	cd 01       	movw	r24, r26
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	98 ab       	std	Y+48, r25	; 0x30
    2130:	8f a7       	std	Y+47, r24	; 0x2f
    2132:	0f c0       	rjmp	.+30     	; 0x2152 <LCD_displayCharacter+0x1f2>
    2134:	88 ec       	ldi	r24, 0xC8	; 200
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	9e a7       	std	Y+46, r25	; 0x2e
    213a:	8d a7       	std	Y+45, r24	; 0x2d
    213c:	8d a5       	ldd	r24, Y+45	; 0x2d
    213e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2140:	01 97       	sbiw	r24, 0x01	; 1
    2142:	f1 f7       	brne	.-4      	; 0x2140 <LCD_displayCharacter+0x1e0>
    2144:	9e a7       	std	Y+46, r25	; 0x2e
    2146:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2148:	8f a5       	ldd	r24, Y+47	; 0x2f
    214a:	98 a9       	ldd	r25, Y+48	; 0x30
    214c:	01 97       	sbiw	r24, 0x01	; 1
    214e:	98 ab       	std	Y+48, r25	; 0x30
    2150:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2152:	8f a5       	ldd	r24, Y+47	; 0x2f
    2154:	98 a9       	ldd	r25, Y+48	; 0x30
    2156:	00 97       	sbiw	r24, 0x00	; 0
    2158:	69 f7       	brne	.-38     	; 0x2134 <LCD_displayCharacter+0x1d4>
    215a:	14 c0       	rjmp	.+40     	; 0x2184 <LCD_displayCharacter+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215c:	69 a9       	ldd	r22, Y+49	; 0x31
    215e:	7a a9       	ldd	r23, Y+50	; 0x32
    2160:	8b a9       	ldd	r24, Y+51	; 0x33
    2162:	9c a9       	ldd	r25, Y+52	; 0x34
    2164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2168:	dc 01       	movw	r26, r24
    216a:	cb 01       	movw	r24, r22
    216c:	98 ab       	std	Y+48, r25	; 0x30
    216e:	8f a7       	std	Y+47, r24	; 0x2f
    2170:	8f a5       	ldd	r24, Y+47	; 0x2f
    2172:	98 a9       	ldd	r25, Y+48	; 0x30
    2174:	9c a7       	std	Y+44, r25	; 0x2c
    2176:	8b a7       	std	Y+43, r24	; 0x2b
    2178:	8b a5       	ldd	r24, Y+43	; 0x2b
    217a:	9c a5       	ldd	r25, Y+44	; 0x2c
    217c:	01 97       	sbiw	r24, 0x01	; 1
    217e:	f1 f7       	brne	.-4      	; 0x217c <LCD_displayCharacter+0x21c>
    2180:	9c a7       	std	Y+44, r25	; 0x2c
    2182:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
    GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	62 e0       	ldi	r22, 0x02	; 2
    2188:	41 e0       	ldi	r20, 0x01	; 1
    218a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePin>
    218e:	80 e0       	ldi	r24, 0x00	; 0
    2190:	90 e0       	ldi	r25, 0x00	; 0
    2192:	a0 e8       	ldi	r26, 0x80	; 128
    2194:	bf e3       	ldi	r27, 0x3F	; 63
    2196:	8f a3       	std	Y+39, r24	; 0x27
    2198:	98 a7       	std	Y+40, r25	; 0x28
    219a:	a9 a7       	std	Y+41, r26	; 0x29
    219c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    219e:	6f a1       	ldd	r22, Y+39	; 0x27
    21a0:	78 a5       	ldd	r23, Y+40	; 0x28
    21a2:	89 a5       	ldd	r24, Y+41	; 0x29
    21a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	4a ef       	ldi	r20, 0xFA	; 250
    21ac:	54 e4       	ldi	r21, 0x44	; 68
    21ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b2:	dc 01       	movw	r26, r24
    21b4:	cb 01       	movw	r24, r22
    21b6:	8b a3       	std	Y+35, r24	; 0x23
    21b8:	9c a3       	std	Y+36, r25	; 0x24
    21ba:	ad a3       	std	Y+37, r26	; 0x25
    21bc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    21be:	6b a1       	ldd	r22, Y+35	; 0x23
    21c0:	7c a1       	ldd	r23, Y+36	; 0x24
    21c2:	8d a1       	ldd	r24, Y+37	; 0x25
    21c4:	9e a1       	ldd	r25, Y+38	; 0x26
    21c6:	20 e0       	ldi	r18, 0x00	; 0
    21c8:	30 e0       	ldi	r19, 0x00	; 0
    21ca:	40 e8       	ldi	r20, 0x80	; 128
    21cc:	5f e3       	ldi	r21, 0x3F	; 63
    21ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21d2:	88 23       	and	r24, r24
    21d4:	2c f4       	brge	.+10     	; 0x21e0 <LCD_displayCharacter+0x280>
		__ticks = 1;
    21d6:	81 e0       	ldi	r24, 0x01	; 1
    21d8:	90 e0       	ldi	r25, 0x00	; 0
    21da:	9a a3       	std	Y+34, r25	; 0x22
    21dc:	89 a3       	std	Y+33, r24	; 0x21
    21de:	3f c0       	rjmp	.+126    	; 0x225e <LCD_displayCharacter+0x2fe>
	else if (__tmp > 65535)
    21e0:	6b a1       	ldd	r22, Y+35	; 0x23
    21e2:	7c a1       	ldd	r23, Y+36	; 0x24
    21e4:	8d a1       	ldd	r24, Y+37	; 0x25
    21e6:	9e a1       	ldd	r25, Y+38	; 0x26
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	4c f5       	brge	.+82     	; 0x224a <LCD_displayCharacter+0x2ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f8:	6f a1       	ldd	r22, Y+39	; 0x27
    21fa:	78 a5       	ldd	r23, Y+40	; 0x28
    21fc:	89 a5       	ldd	r24, Y+41	; 0x29
    21fe:	9a a5       	ldd	r25, Y+42	; 0x2a
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	30 e0       	ldi	r19, 0x00	; 0
    2204:	40 e2       	ldi	r20, 0x20	; 32
    2206:	51 e4       	ldi	r21, 0x41	; 65
    2208:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    220c:	dc 01       	movw	r26, r24
    220e:	cb 01       	movw	r24, r22
    2210:	bc 01       	movw	r22, r24
    2212:	cd 01       	movw	r24, r26
    2214:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	9a a3       	std	Y+34, r25	; 0x22
    221e:	89 a3       	std	Y+33, r24	; 0x21
    2220:	0f c0       	rjmp	.+30     	; 0x2240 <LCD_displayCharacter+0x2e0>
    2222:	88 ec       	ldi	r24, 0xC8	; 200
    2224:	90 e0       	ldi	r25, 0x00	; 0
    2226:	98 a3       	std	Y+32, r25	; 0x20
    2228:	8f 8f       	std	Y+31, r24	; 0x1f
    222a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    222c:	98 a1       	ldd	r25, Y+32	; 0x20
    222e:	01 97       	sbiw	r24, 0x01	; 1
    2230:	f1 f7       	brne	.-4      	; 0x222e <LCD_displayCharacter+0x2ce>
    2232:	98 a3       	std	Y+32, r25	; 0x20
    2234:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2236:	89 a1       	ldd	r24, Y+33	; 0x21
    2238:	9a a1       	ldd	r25, Y+34	; 0x22
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	9a a3       	std	Y+34, r25	; 0x22
    223e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2240:	89 a1       	ldd	r24, Y+33	; 0x21
    2242:	9a a1       	ldd	r25, Y+34	; 0x22
    2244:	00 97       	sbiw	r24, 0x00	; 0
    2246:	69 f7       	brne	.-38     	; 0x2222 <LCD_displayCharacter+0x2c2>
    2248:	14 c0       	rjmp	.+40     	; 0x2272 <LCD_displayCharacter+0x312>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    224a:	6b a1       	ldd	r22, Y+35	; 0x23
    224c:	7c a1       	ldd	r23, Y+36	; 0x24
    224e:	8d a1       	ldd	r24, Y+37	; 0x25
    2250:	9e a1       	ldd	r25, Y+38	; 0x26
    2252:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2256:	dc 01       	movw	r26, r24
    2258:	cb 01       	movw	r24, r22
    225a:	9a a3       	std	Y+34, r25	; 0x22
    225c:	89 a3       	std	Y+33, r24	; 0x21
    225e:	89 a1       	ldd	r24, Y+33	; 0x21
    2260:	9a a1       	ldd	r25, Y+34	; 0x22
    2262:	9e 8f       	std	Y+30, r25	; 0x1e
    2264:	8d 8f       	std	Y+29, r24	; 0x1d
    2266:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2268:	9e 8d       	ldd	r25, Y+30	; 0x1e
    226a:	01 97       	sbiw	r24, 0x01	; 1
    226c:	f1 f7       	brne	.-4      	; 0x226a <LCD_displayCharacter+0x30a>
    226e:	9e 8f       	std	Y+30, r25	; 0x1e
    2270:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2272:	fe 01       	movw	r30, r28
    2274:	e9 5b       	subi	r30, 0xB9	; 185
    2276:	ff 4f       	sbci	r31, 0xFF	; 255
    2278:	80 e0       	ldi	r24, 0x00	; 0
    227a:	60 81       	ld	r22, Z
    227c:	0e 94 22 0b 	call	0x1644	; 0x1644 <GPIO_writePort>
    2280:	80 e0       	ldi	r24, 0x00	; 0
    2282:	90 e0       	ldi	r25, 0x00	; 0
    2284:	a0 e8       	ldi	r26, 0x80	; 128
    2286:	bf e3       	ldi	r27, 0x3F	; 63
    2288:	89 8f       	std	Y+25, r24	; 0x19
    228a:	9a 8f       	std	Y+26, r25	; 0x1a
    228c:	ab 8f       	std	Y+27, r26	; 0x1b
    228e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2290:	69 8d       	ldd	r22, Y+25	; 0x19
    2292:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2294:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2296:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2298:	20 e0       	ldi	r18, 0x00	; 0
    229a:	30 e0       	ldi	r19, 0x00	; 0
    229c:	4a ef       	ldi	r20, 0xFA	; 250
    229e:	54 e4       	ldi	r21, 0x44	; 68
    22a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a4:	dc 01       	movw	r26, r24
    22a6:	cb 01       	movw	r24, r22
    22a8:	8d 8b       	std	Y+21, r24	; 0x15
    22aa:	9e 8b       	std	Y+22, r25	; 0x16
    22ac:	af 8b       	std	Y+23, r26	; 0x17
    22ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22b0:	6d 89       	ldd	r22, Y+21	; 0x15
    22b2:	7e 89       	ldd	r23, Y+22	; 0x16
    22b4:	8f 89       	ldd	r24, Y+23	; 0x17
    22b6:	98 8d       	ldd	r25, Y+24	; 0x18
    22b8:	20 e0       	ldi	r18, 0x00	; 0
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	40 e8       	ldi	r20, 0x80	; 128
    22be:	5f e3       	ldi	r21, 0x3F	; 63
    22c0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c4:	88 23       	and	r24, r24
    22c6:	2c f4       	brge	.+10     	; 0x22d2 <LCD_displayCharacter+0x372>
		__ticks = 1;
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	90 e0       	ldi	r25, 0x00	; 0
    22cc:	9c 8b       	std	Y+20, r25	; 0x14
    22ce:	8b 8b       	std	Y+19, r24	; 0x13
    22d0:	3f c0       	rjmp	.+126    	; 0x2350 <LCD_displayCharacter+0x3f0>
	else if (__tmp > 65535)
    22d2:	6d 89       	ldd	r22, Y+21	; 0x15
    22d4:	7e 89       	ldd	r23, Y+22	; 0x16
    22d6:	8f 89       	ldd	r24, Y+23	; 0x17
    22d8:	98 8d       	ldd	r25, Y+24	; 0x18
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	3f ef       	ldi	r19, 0xFF	; 255
    22de:	4f e7       	ldi	r20, 0x7F	; 127
    22e0:	57 e4       	ldi	r21, 0x47	; 71
    22e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e6:	18 16       	cp	r1, r24
    22e8:	4c f5       	brge	.+82     	; 0x233c <LCD_displayCharacter+0x3dc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22ea:	69 8d       	ldd	r22, Y+25	; 0x19
    22ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	40 e2       	ldi	r20, 0x20	; 32
    22f8:	51 e4       	ldi	r21, 0x41	; 65
    22fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	bc 01       	movw	r22, r24
    2304:	cd 01       	movw	r24, r26
    2306:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	9c 8b       	std	Y+20, r25	; 0x14
    2310:	8b 8b       	std	Y+19, r24	; 0x13
    2312:	0f c0       	rjmp	.+30     	; 0x2332 <LCD_displayCharacter+0x3d2>
    2314:	88 ec       	ldi	r24, 0xC8	; 200
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9a 8b       	std	Y+18, r25	; 0x12
    231a:	89 8b       	std	Y+17, r24	; 0x11
    231c:	89 89       	ldd	r24, Y+17	; 0x11
    231e:	9a 89       	ldd	r25, Y+18	; 0x12
    2320:	01 97       	sbiw	r24, 0x01	; 1
    2322:	f1 f7       	brne	.-4      	; 0x2320 <LCD_displayCharacter+0x3c0>
    2324:	9a 8b       	std	Y+18, r25	; 0x12
    2326:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2328:	8b 89       	ldd	r24, Y+19	; 0x13
    232a:	9c 89       	ldd	r25, Y+20	; 0x14
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	9c 8b       	std	Y+20, r25	; 0x14
    2330:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2332:	8b 89       	ldd	r24, Y+19	; 0x13
    2334:	9c 89       	ldd	r25, Y+20	; 0x14
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	69 f7       	brne	.-38     	; 0x2314 <LCD_displayCharacter+0x3b4>
    233a:	14 c0       	rjmp	.+40     	; 0x2364 <LCD_displayCharacter+0x404>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    233c:	6d 89       	ldd	r22, Y+21	; 0x15
    233e:	7e 89       	ldd	r23, Y+22	; 0x16
    2340:	8f 89       	ldd	r24, Y+23	; 0x17
    2342:	98 8d       	ldd	r25, Y+24	; 0x18
    2344:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2348:	dc 01       	movw	r26, r24
    234a:	cb 01       	movw	r24, r22
    234c:	9c 8b       	std	Y+20, r25	; 0x14
    234e:	8b 8b       	std	Y+19, r24	; 0x13
    2350:	8b 89       	ldd	r24, Y+19	; 0x13
    2352:	9c 89       	ldd	r25, Y+20	; 0x14
    2354:	98 8b       	std	Y+16, r25	; 0x10
    2356:	8f 87       	std	Y+15, r24	; 0x0f
    2358:	8f 85       	ldd	r24, Y+15	; 0x0f
    235a:	98 89       	ldd	r25, Y+16	; 0x10
    235c:	01 97       	sbiw	r24, 0x01	; 1
    235e:	f1 f7       	brne	.-4      	; 0x235c <LCD_displayCharacter+0x3fc>
    2360:	98 8b       	std	Y+16, r25	; 0x10
    2362:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2364:	81 e0       	ldi	r24, 0x01	; 1
    2366:	62 e0       	ldi	r22, 0x02	; 2
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	0e 94 58 09 	call	0x12b0	; 0x12b0 <GPIO_writePin>
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	a0 e8       	ldi	r26, 0x80	; 128
    2374:	bf e3       	ldi	r27, 0x3F	; 63
    2376:	8b 87       	std	Y+11, r24	; 0x0b
    2378:	9c 87       	std	Y+12, r25	; 0x0c
    237a:	ad 87       	std	Y+13, r26	; 0x0d
    237c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    237e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2380:	7c 85       	ldd	r23, Y+12	; 0x0c
    2382:	8d 85       	ldd	r24, Y+13	; 0x0d
    2384:	9e 85       	ldd	r25, Y+14	; 0x0e
    2386:	20 e0       	ldi	r18, 0x00	; 0
    2388:	30 e0       	ldi	r19, 0x00	; 0
    238a:	4a ef       	ldi	r20, 0xFA	; 250
    238c:	54 e4       	ldi	r21, 0x44	; 68
    238e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2392:	dc 01       	movw	r26, r24
    2394:	cb 01       	movw	r24, r22
    2396:	8f 83       	std	Y+7, r24	; 0x07
    2398:	98 87       	std	Y+8, r25	; 0x08
    239a:	a9 87       	std	Y+9, r26	; 0x09
    239c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    239e:	6f 81       	ldd	r22, Y+7	; 0x07
    23a0:	78 85       	ldd	r23, Y+8	; 0x08
    23a2:	89 85       	ldd	r24, Y+9	; 0x09
    23a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23a6:	20 e0       	ldi	r18, 0x00	; 0
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e8       	ldi	r20, 0x80	; 128
    23ac:	5f e3       	ldi	r21, 0x3F	; 63
    23ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b2:	88 23       	and	r24, r24
    23b4:	2c f4       	brge	.+10     	; 0x23c0 <LCD_displayCharacter+0x460>
		__ticks = 1;
    23b6:	81 e0       	ldi	r24, 0x01	; 1
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	9e 83       	std	Y+6, r25	; 0x06
    23bc:	8d 83       	std	Y+5, r24	; 0x05
    23be:	3f c0       	rjmp	.+126    	; 0x243e <LCD_displayCharacter+0x4de>
	else if (__tmp > 65535)
    23c0:	6f 81       	ldd	r22, Y+7	; 0x07
    23c2:	78 85       	ldd	r23, Y+8	; 0x08
    23c4:	89 85       	ldd	r24, Y+9	; 0x09
    23c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	3f ef       	ldi	r19, 0xFF	; 255
    23cc:	4f e7       	ldi	r20, 0x7F	; 127
    23ce:	57 e4       	ldi	r21, 0x47	; 71
    23d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d4:	18 16       	cp	r1, r24
    23d6:	4c f5       	brge	.+82     	; 0x242a <LCD_displayCharacter+0x4ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    23da:	7c 85       	ldd	r23, Y+12	; 0x0c
    23dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    23de:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e2       	ldi	r20, 0x20	; 32
    23e6:	51 e4       	ldi	r21, 0x41	; 65
    23e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ec:	dc 01       	movw	r26, r24
    23ee:	cb 01       	movw	r24, r22
    23f0:	bc 01       	movw	r22, r24
    23f2:	cd 01       	movw	r24, r26
    23f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	9e 83       	std	Y+6, r25	; 0x06
    23fe:	8d 83       	std	Y+5, r24	; 0x05
    2400:	0f c0       	rjmp	.+30     	; 0x2420 <LCD_displayCharacter+0x4c0>
    2402:	88 ec       	ldi	r24, 0xC8	; 200
    2404:	90 e0       	ldi	r25, 0x00	; 0
    2406:	9c 83       	std	Y+4, r25	; 0x04
    2408:	8b 83       	std	Y+3, r24	; 0x03
    240a:	8b 81       	ldd	r24, Y+3	; 0x03
    240c:	9c 81       	ldd	r25, Y+4	; 0x04
    240e:	01 97       	sbiw	r24, 0x01	; 1
    2410:	f1 f7       	brne	.-4      	; 0x240e <LCD_displayCharacter+0x4ae>
    2412:	9c 83       	std	Y+4, r25	; 0x04
    2414:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2416:	8d 81       	ldd	r24, Y+5	; 0x05
    2418:	9e 81       	ldd	r25, Y+6	; 0x06
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	9e 83       	std	Y+6, r25	; 0x06
    241e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2420:	8d 81       	ldd	r24, Y+5	; 0x05
    2422:	9e 81       	ldd	r25, Y+6	; 0x06
    2424:	00 97       	sbiw	r24, 0x00	; 0
    2426:	69 f7       	brne	.-38     	; 0x2402 <LCD_displayCharacter+0x4a2>
    2428:	14 c0       	rjmp	.+40     	; 0x2452 <LCD_displayCharacter+0x4f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242a:	6f 81       	ldd	r22, Y+7	; 0x07
    242c:	78 85       	ldd	r23, Y+8	; 0x08
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2436:	dc 01       	movw	r26, r24
    2438:	cb 01       	movw	r24, r22
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
    243e:	8d 81       	ldd	r24, Y+5	; 0x05
    2440:	9e 81       	ldd	r25, Y+6	; 0x06
    2442:	9a 83       	std	Y+2, r25	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
    2446:	89 81       	ldd	r24, Y+1	; 0x01
    2448:	9a 81       	ldd	r25, Y+2	; 0x02
    244a:	01 97       	sbiw	r24, 0x01	; 1
    244c:	f1 f7       	brne	.-4      	; 0x244a <LCD_displayCharacter+0x4ea>
    244e:	9a 83       	std	Y+2, r25	; 0x02
    2450:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2452:	c9 5b       	subi	r28, 0xB9	; 185
    2454:	df 4f       	sbci	r29, 0xFF	; 255
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	1f 91       	pop	r17
    2466:	0f 91       	pop	r16
    2468:	08 95       	ret

0000246a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    246a:	df 93       	push	r29
    246c:	cf 93       	push	r28
    246e:	00 d0       	rcall	.+0      	; 0x2470 <LCD_displayString+0x6>
    2470:	0f 92       	push	r0
    2472:	cd b7       	in	r28, 0x3d	; 61
    2474:	de b7       	in	r29, 0x3e	; 62
    2476:	9b 83       	std	Y+3, r25	; 0x03
    2478:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    247a:	19 82       	std	Y+1, r1	; 0x01
    247c:	0e c0       	rjmp	.+28     	; 0x249a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    247e:	89 81       	ldd	r24, Y+1	; 0x01
    2480:	28 2f       	mov	r18, r24
    2482:	30 e0       	ldi	r19, 0x00	; 0
    2484:	8a 81       	ldd	r24, Y+2	; 0x02
    2486:	9b 81       	ldd	r25, Y+3	; 0x03
    2488:	fc 01       	movw	r30, r24
    248a:	e2 0f       	add	r30, r18
    248c:	f3 1f       	adc	r31, r19
    248e:	80 81       	ld	r24, Z
    2490:	0e 94 b0 0f 	call	0x1f60	; 0x1f60 <LCD_displayCharacter>
		i++;
    2494:	89 81       	ldd	r24, Y+1	; 0x01
    2496:	8f 5f       	subi	r24, 0xFF	; 255
    2498:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    249a:	89 81       	ldd	r24, Y+1	; 0x01
    249c:	28 2f       	mov	r18, r24
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	8a 81       	ldd	r24, Y+2	; 0x02
    24a2:	9b 81       	ldd	r25, Y+3	; 0x03
    24a4:	fc 01       	movw	r30, r24
    24a6:	e2 0f       	add	r30, r18
    24a8:	f3 1f       	adc	r31, r19
    24aa:	80 81       	ld	r24, Z
    24ac:	88 23       	and	r24, r24
    24ae:	39 f7       	brne	.-50     	; 0x247e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	cf 91       	pop	r28
    24b8:	df 91       	pop	r29
    24ba:	08 95       	ret

000024bc <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    24bc:	df 93       	push	r29
    24be:	cf 93       	push	r28
    24c0:	00 d0       	rcall	.+0      	; 0x24c2 <LCD_moveCursor+0x6>
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <LCD_moveCursor+0x8>
    24c4:	0f 92       	push	r0
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	8a 83       	std	Y+2, r24	; 0x02
    24cc:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    24ce:	8a 81       	ldd	r24, Y+2	; 0x02
    24d0:	28 2f       	mov	r18, r24
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	3d 83       	std	Y+5, r19	; 0x05
    24d6:	2c 83       	std	Y+4, r18	; 0x04
    24d8:	8c 81       	ldd	r24, Y+4	; 0x04
    24da:	9d 81       	ldd	r25, Y+5	; 0x05
    24dc:	81 30       	cpi	r24, 0x01	; 1
    24de:	91 05       	cpc	r25, r1
    24e0:	c1 f0       	breq	.+48     	; 0x2512 <LCD_moveCursor+0x56>
    24e2:	2c 81       	ldd	r18, Y+4	; 0x04
    24e4:	3d 81       	ldd	r19, Y+5	; 0x05
    24e6:	22 30       	cpi	r18, 0x02	; 2
    24e8:	31 05       	cpc	r19, r1
    24ea:	2c f4       	brge	.+10     	; 0x24f6 <LCD_moveCursor+0x3a>
    24ec:	8c 81       	ldd	r24, Y+4	; 0x04
    24ee:	9d 81       	ldd	r25, Y+5	; 0x05
    24f0:	00 97       	sbiw	r24, 0x00	; 0
    24f2:	61 f0       	breq	.+24     	; 0x250c <LCD_moveCursor+0x50>
    24f4:	19 c0       	rjmp	.+50     	; 0x2528 <LCD_moveCursor+0x6c>
    24f6:	2c 81       	ldd	r18, Y+4	; 0x04
    24f8:	3d 81       	ldd	r19, Y+5	; 0x05
    24fa:	22 30       	cpi	r18, 0x02	; 2
    24fc:	31 05       	cpc	r19, r1
    24fe:	69 f0       	breq	.+26     	; 0x251a <LCD_moveCursor+0x5e>
    2500:	8c 81       	ldd	r24, Y+4	; 0x04
    2502:	9d 81       	ldd	r25, Y+5	; 0x05
    2504:	83 30       	cpi	r24, 0x03	; 3
    2506:	91 05       	cpc	r25, r1
    2508:	61 f0       	breq	.+24     	; 0x2522 <LCD_moveCursor+0x66>
    250a:	0e c0       	rjmp	.+28     	; 0x2528 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	89 83       	std	Y+1, r24	; 0x01
    2510:	0b c0       	rjmp	.+22     	; 0x2528 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	80 5c       	subi	r24, 0xC0	; 192
    2516:	89 83       	std	Y+1, r24	; 0x01
    2518:	07 c0       	rjmp	.+14     	; 0x2528 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	80 5f       	subi	r24, 0xF0	; 240
    251e:	89 83       	std	Y+1, r24	; 0x01
    2520:	03 c0       	rjmp	.+6      	; 0x2528 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2522:	8b 81       	ldd	r24, Y+3	; 0x03
    2524:	80 5b       	subi	r24, 0xB0	; 176
    2526:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	80 68       	ori	r24, 0x80	; 128
    252c:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_sendCommand>
}
    2530:	0f 90       	pop	r0
    2532:	0f 90       	pop	r0
    2534:	0f 90       	pop	r0
    2536:	0f 90       	pop	r0
    2538:	0f 90       	pop	r0
    253a:	cf 91       	pop	r28
    253c:	df 91       	pop	r29
    253e:	08 95       	ret

00002540 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2540:	df 93       	push	r29
    2542:	cf 93       	push	r28
    2544:	00 d0       	rcall	.+0      	; 0x2546 <LCD_displayStringRowColumn+0x6>
    2546:	00 d0       	rcall	.+0      	; 0x2548 <LCD_displayStringRowColumn+0x8>
    2548:	cd b7       	in	r28, 0x3d	; 61
    254a:	de b7       	in	r29, 0x3e	; 62
    254c:	89 83       	std	Y+1, r24	; 0x01
    254e:	6a 83       	std	Y+2, r22	; 0x02
    2550:	5c 83       	std	Y+4, r21	; 0x04
    2552:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2554:	89 81       	ldd	r24, Y+1	; 0x01
    2556:	6a 81       	ldd	r22, Y+2	; 0x02
    2558:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    255c:	8b 81       	ldd	r24, Y+3	; 0x03
    255e:	9c 81       	ldd	r25, Y+4	; 0x04
    2560:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_displayString>
}
    2564:	0f 90       	pop	r0
    2566:	0f 90       	pop	r0
    2568:	0f 90       	pop	r0
    256a:	0f 90       	pop	r0
    256c:	cf 91       	pop	r28
    256e:	df 91       	pop	r29
    2570:	08 95       	ret

00002572 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2572:	df 93       	push	r29
    2574:	cf 93       	push	r28
    2576:	cd b7       	in	r28, 0x3d	; 61
    2578:	de b7       	in	r29, 0x3e	; 62
    257a:	62 97       	sbiw	r28, 0x12	; 18
    257c:	0f b6       	in	r0, 0x3f	; 63
    257e:	f8 94       	cli
    2580:	de bf       	out	0x3e, r29	; 62
    2582:	0f be       	out	0x3f, r0	; 63
    2584:	cd bf       	out	0x3d, r28	; 61
    2586:	9a 8b       	std	Y+18, r25	; 0x12
    2588:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    258a:	89 89       	ldd	r24, Y+17	; 0x11
    258c:	9a 89       	ldd	r25, Y+18	; 0x12
    258e:	9e 01       	movw	r18, r28
    2590:	2f 5f       	subi	r18, 0xFF	; 255
    2592:	3f 4f       	sbci	r19, 0xFF	; 255
    2594:	b9 01       	movw	r22, r18
    2596:	4a e0       	ldi	r20, 0x0A	; 10
    2598:	50 e0       	ldi	r21, 0x00	; 0
    259a:	0e 94 76 13 	call	0x26ec	; 0x26ec <itoa>
   LCD_displayString(buff); /* Display the string */
    259e:	ce 01       	movw	r24, r28
    25a0:	01 96       	adiw	r24, 0x01	; 1
    25a2:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_displayString>
}
    25a6:	62 96       	adiw	r28, 0x12	; 18
    25a8:	0f b6       	in	r0, 0x3f	; 63
    25aa:	f8 94       	cli
    25ac:	de bf       	out	0x3e, r29	; 62
    25ae:	0f be       	out	0x3f, r0	; 63
    25b0:	cd bf       	out	0x3d, r28	; 61
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	cd b7       	in	r28, 0x3d	; 61
    25be:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    25c0:	81 e0       	ldi	r24, 0x01	; 1
    25c2:	0e 94 2b 0d 	call	0x1a56	; 0x1a56 <LCD_sendCommand>
}
    25c6:	cf 91       	pop	r28
    25c8:	df 91       	pop	r29
    25ca:	08 95       	ret

000025cc <main>:

#include "lcd.h"
#include "Ultrasonic.h"
#include <avr/io.h>

int main(void){
    25cc:	df 93       	push	r29
    25ce:	cf 93       	push	r28
    25d0:	00 d0       	rcall	.+0      	; 0x25d2 <main+0x6>
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
	/* Enable Global Interrupt I-Bit */
		SREG |= (1<<7);
    25d6:	af e5       	ldi	r26, 0x5F	; 95
    25d8:	b0 e0       	ldi	r27, 0x00	; 0
    25da:	ef e5       	ldi	r30, 0x5F	; 95
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	80 81       	ld	r24, Z
    25e0:	80 68       	ori	r24, 0x80	; 128
    25e2:	8c 93       	st	X, r24
    /*initialize ultrasonic driver*/
		 Ultrasonic_init();
    25e4:	0e 94 17 07 	call	0xe2e	; 0xe2e <Ultrasonic_init>
	/*initialize lcd drive*/
		 LCD_init();
    25e8:	0e 94 8a 0c 	call	0x1914	; 0x1914 <LCD_init>
		 LCD_displayString("Distance=");
    25ec:	80 e6       	ldi	r24, 0x60	; 96
    25ee:	90 e0       	ldi	r25, 0x00	; 0
    25f0:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_displayString>
		 LCD_moveCursor(0,9);
    25f4:	80 e0       	ldi	r24, 0x00	; 0
    25f6:	69 e0       	ldi	r22, 0x09	; 9
    25f8:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_moveCursor>
	/*declare variable for storing the returned and measured distance*/
		 uint16 distance;
	while (1){

		distance = Ultrasonic_readDistance();
    25fc:	0e 94 12 08 	call	0x1024	; 0x1024 <Ultrasonic_readDistance>
    2600:	9a 83       	std	Y+2, r25	; 0x02
    2602:	89 83       	std	Y+1, r24	; 0x01

				LCD_moveCursor(0,9);
    2604:	80 e0       	ldi	r24, 0x00	; 0
    2606:	69 e0       	ldi	r22, 0x09	; 9
    2608:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LCD_moveCursor>
				if (distance>=100)
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	9a 81       	ldd	r25, Y+2	; 0x02
    2610:	84 36       	cpi	r24, 0x64	; 100
    2612:	91 05       	cpc	r25, r1
    2614:	28 f0       	brcs	.+10     	; 0x2620 <main+0x54>
				{
				 LCD_intgerToString(distance);
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	9a 81       	ldd	r25, Y+2	; 0x02
    261a:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_intgerToString>
    261e:	ee cf       	rjmp	.-36     	; 0x25fc <main+0x30>

				}
				else if (distance>=10 && distance<100)
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	8a 30       	cpi	r24, 0x0A	; 10
    2626:	91 05       	cpc	r25, r1
    2628:	a8 f0       	brcs	.+42     	; 0x2654 <main+0x88>
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	84 36       	cpi	r24, 0x64	; 100
    2630:	91 05       	cpc	r25, r1
    2632:	80 f4       	brcc	.+32     	; 0x2654 <main+0x88>
				{
					 LCD_intgerToString(distance);
    2634:	89 81       	ldd	r24, Y+1	; 0x01
    2636:	9a 81       	ldd	r25, Y+2	; 0x02
    2638:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_intgerToString>
					 LCD_displayStringRowColumn(0,12," ");
    263c:	2a e6       	ldi	r18, 0x6A	; 106
    263e:	30 e0       	ldi	r19, 0x00	; 0
    2640:	80 e0       	ldi	r24, 0x00	; 0
    2642:	6c e0       	ldi	r22, 0x0C	; 12
    2644:	a9 01       	movw	r20, r18
    2646:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayStringRowColumn>
					 LCD_displayString("cm");
    264a:	8c e6       	ldi	r24, 0x6C	; 108
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_displayString>
    2652:	d4 cf       	rjmp	.-88     	; 0x25fc <main+0x30>

				}
				else if (distance<10 && distance>=0)
    2654:	89 81       	ldd	r24, Y+1	; 0x01
    2656:	9a 81       	ldd	r25, Y+2	; 0x02
    2658:	8a 30       	cpi	r24, 0x0A	; 10
    265a:	91 05       	cpc	r25, r1
    265c:	78 f6       	brcc	.-98     	; 0x25fc <main+0x30>
				{
					 LCD_intgerToString(distance);
    265e:	89 81       	ldd	r24, Y+1	; 0x01
    2660:	9a 81       	ldd	r25, Y+2	; 0x02
    2662:	0e 94 b9 12 	call	0x2572	; 0x2572 <LCD_intgerToString>
					 LCD_displayStringRowColumn(0,11,"  ");
    2666:	2f e6       	ldi	r18, 0x6F	; 111
    2668:	30 e0       	ldi	r19, 0x00	; 0
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	6b e0       	ldi	r22, 0x0B	; 11
    266e:	a9 01       	movw	r20, r18
    2670:	0e 94 a0 12 	call	0x2540	; 0x2540 <LCD_displayStringRowColumn>
					 LCD_displayString("cm");
    2674:	8c e6       	ldi	r24, 0x6C	; 108
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	0e 94 35 12 	call	0x246a	; 0x246a <LCD_displayString>
    267c:	bf cf       	rjmp	.-130    	; 0x25fc <main+0x30>

0000267e <__prologue_saves__>:
    267e:	2f 92       	push	r2
    2680:	3f 92       	push	r3
    2682:	4f 92       	push	r4
    2684:	5f 92       	push	r5
    2686:	6f 92       	push	r6
    2688:	7f 92       	push	r7
    268a:	8f 92       	push	r8
    268c:	9f 92       	push	r9
    268e:	af 92       	push	r10
    2690:	bf 92       	push	r11
    2692:	cf 92       	push	r12
    2694:	df 92       	push	r13
    2696:	ef 92       	push	r14
    2698:	ff 92       	push	r15
    269a:	0f 93       	push	r16
    269c:	1f 93       	push	r17
    269e:	cf 93       	push	r28
    26a0:	df 93       	push	r29
    26a2:	cd b7       	in	r28, 0x3d	; 61
    26a4:	de b7       	in	r29, 0x3e	; 62
    26a6:	ca 1b       	sub	r28, r26
    26a8:	db 0b       	sbc	r29, r27
    26aa:	0f b6       	in	r0, 0x3f	; 63
    26ac:	f8 94       	cli
    26ae:	de bf       	out	0x3e, r29	; 62
    26b0:	0f be       	out	0x3f, r0	; 63
    26b2:	cd bf       	out	0x3d, r28	; 61
    26b4:	09 94       	ijmp

000026b6 <__epilogue_restores__>:
    26b6:	2a 88       	ldd	r2, Y+18	; 0x12
    26b8:	39 88       	ldd	r3, Y+17	; 0x11
    26ba:	48 88       	ldd	r4, Y+16	; 0x10
    26bc:	5f 84       	ldd	r5, Y+15	; 0x0f
    26be:	6e 84       	ldd	r6, Y+14	; 0x0e
    26c0:	7d 84       	ldd	r7, Y+13	; 0x0d
    26c2:	8c 84       	ldd	r8, Y+12	; 0x0c
    26c4:	9b 84       	ldd	r9, Y+11	; 0x0b
    26c6:	aa 84       	ldd	r10, Y+10	; 0x0a
    26c8:	b9 84       	ldd	r11, Y+9	; 0x09
    26ca:	c8 84       	ldd	r12, Y+8	; 0x08
    26cc:	df 80       	ldd	r13, Y+7	; 0x07
    26ce:	ee 80       	ldd	r14, Y+6	; 0x06
    26d0:	fd 80       	ldd	r15, Y+5	; 0x05
    26d2:	0c 81       	ldd	r16, Y+4	; 0x04
    26d4:	1b 81       	ldd	r17, Y+3	; 0x03
    26d6:	aa 81       	ldd	r26, Y+2	; 0x02
    26d8:	b9 81       	ldd	r27, Y+1	; 0x01
    26da:	ce 0f       	add	r28, r30
    26dc:	d1 1d       	adc	r29, r1
    26de:	0f b6       	in	r0, 0x3f	; 63
    26e0:	f8 94       	cli
    26e2:	de bf       	out	0x3e, r29	; 62
    26e4:	0f be       	out	0x3f, r0	; 63
    26e6:	cd bf       	out	0x3d, r28	; 61
    26e8:	ed 01       	movw	r28, r26
    26ea:	08 95       	ret

000026ec <itoa>:
    26ec:	fb 01       	movw	r30, r22
    26ee:	9f 01       	movw	r18, r30
    26f0:	e8 94       	clt
    26f2:	42 30       	cpi	r20, 0x02	; 2
    26f4:	c4 f0       	brlt	.+48     	; 0x2726 <itoa+0x3a>
    26f6:	45 32       	cpi	r20, 0x25	; 37
    26f8:	b4 f4       	brge	.+44     	; 0x2726 <itoa+0x3a>
    26fa:	4a 30       	cpi	r20, 0x0A	; 10
    26fc:	29 f4       	brne	.+10     	; 0x2708 <itoa+0x1c>
    26fe:	97 fb       	bst	r25, 7
    2700:	1e f4       	brtc	.+6      	; 0x2708 <itoa+0x1c>
    2702:	90 95       	com	r25
    2704:	81 95       	neg	r24
    2706:	9f 4f       	sbci	r25, 0xFF	; 255
    2708:	64 2f       	mov	r22, r20
    270a:	77 27       	eor	r23, r23
    270c:	0e 94 a7 13 	call	0x274e	; 0x274e <__udivmodhi4>
    2710:	80 5d       	subi	r24, 0xD0	; 208
    2712:	8a 33       	cpi	r24, 0x3A	; 58
    2714:	0c f0       	brlt	.+2      	; 0x2718 <itoa+0x2c>
    2716:	89 5d       	subi	r24, 0xD9	; 217
    2718:	81 93       	st	Z+, r24
    271a:	cb 01       	movw	r24, r22
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	a1 f7       	brne	.-24     	; 0x2708 <itoa+0x1c>
    2720:	16 f4       	brtc	.+4      	; 0x2726 <itoa+0x3a>
    2722:	5d e2       	ldi	r21, 0x2D	; 45
    2724:	51 93       	st	Z+, r21
    2726:	10 82       	st	Z, r1
    2728:	c9 01       	movw	r24, r18
    272a:	0c 94 97 13 	jmp	0x272e	; 0x272e <strrev>

0000272e <strrev>:
    272e:	dc 01       	movw	r26, r24
    2730:	fc 01       	movw	r30, r24
    2732:	67 2f       	mov	r22, r23
    2734:	71 91       	ld	r23, Z+
    2736:	77 23       	and	r23, r23
    2738:	e1 f7       	brne	.-8      	; 0x2732 <strrev+0x4>
    273a:	32 97       	sbiw	r30, 0x02	; 2
    273c:	04 c0       	rjmp	.+8      	; 0x2746 <strrev+0x18>
    273e:	7c 91       	ld	r23, X
    2740:	6d 93       	st	X+, r22
    2742:	70 83       	st	Z, r23
    2744:	62 91       	ld	r22, -Z
    2746:	ae 17       	cp	r26, r30
    2748:	bf 07       	cpc	r27, r31
    274a:	c8 f3       	brcs	.-14     	; 0x273e <strrev+0x10>
    274c:	08 95       	ret

0000274e <__udivmodhi4>:
    274e:	aa 1b       	sub	r26, r26
    2750:	bb 1b       	sub	r27, r27
    2752:	51 e1       	ldi	r21, 0x11	; 17
    2754:	07 c0       	rjmp	.+14     	; 0x2764 <__udivmodhi4_ep>

00002756 <__udivmodhi4_loop>:
    2756:	aa 1f       	adc	r26, r26
    2758:	bb 1f       	adc	r27, r27
    275a:	a6 17       	cp	r26, r22
    275c:	b7 07       	cpc	r27, r23
    275e:	10 f0       	brcs	.+4      	; 0x2764 <__udivmodhi4_ep>
    2760:	a6 1b       	sub	r26, r22
    2762:	b7 0b       	sbc	r27, r23

00002764 <__udivmodhi4_ep>:
    2764:	88 1f       	adc	r24, r24
    2766:	99 1f       	adc	r25, r25
    2768:	5a 95       	dec	r21
    276a:	a9 f7       	brne	.-22     	; 0x2756 <__udivmodhi4_loop>
    276c:	80 95       	com	r24
    276e:	90 95       	com	r25
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	08 95       	ret

00002776 <_exit>:
    2776:	f8 94       	cli

00002778 <__stop_program>:
    2778:	ff cf       	rjmp	.-2      	; 0x2778 <__stop_program>
